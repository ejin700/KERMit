============================= test session starts ==============================
platform darwin -- Python 3.8.3, pytest-6.1.2, py-1.9.0, pluggy-0.13.1 -- /Users/meganfrenkel/Workspace/KERMit/server/venv/bin/python
cachedir: .pytest_cache
rootdir: /Users/meganfrenkel/Workspace/KERMit
plugins: mock-3.3.1
collecting ... collected 31 items

server/tests/integration/test_authentication.py::test_registration_missing_header PASSED [  3%]
server/tests/integration/test_authentication.py::test_registration_malformed_header FAILED [  6%]
server/tests/integration/test_authentication.py::test_registration_verification_token_invalid FAILED [  9%]
server/tests/integration/test_authentication.py::test_registration_user_info_error FAILED [ 12%]
server/tests/integration/test_authentication.py::test_registration_token_valid_missing_info1 FAILED [ 16%]
server/tests/integration/test_authentication.py::test_registration_token_valid_missing_info2 FAILED [ 19%]
server/tests/integration/test_authentication.py::test_registration_user_id_already_exists FAILED [ 22%]
server/tests/integration/test_authentication.py::test_successful_user_registration FAILED [ 25%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_use_game_without_registration FAILED [ 29%]
server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_no_puzzles FAILED [ 32%]
server/tests/integration/test_sudoku_endpoints.py::test_get_nonexistent_puzzle FAILED [ 35%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_valid FAILED [ 38%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_small FAILED [ 41%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_large FAILED [ 45%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_large FAILED [ 48%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_small FAILED [ 51%]
server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_for_user FAILED [ 54%]
server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_valid FAILED [ 58%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_get_unaffiliated_puzzle FAILED [ 61%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_already_in_puzzle FAILED [ 64%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_that_doesnt_exist FAILED [ 67%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_valid FAILED [ 70%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_join_puzzle_max_players_reached FAILED [ 74%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_no_value_yet FAILED [ 77%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_override_value FAILED [ 80%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_puzzle_player_is_not_affiliated_with FAILED [ 83%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_low FAILED [ 87%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_high FAILED [ 90%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_high FAILED [ 93%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_low FAILED [ 96%]
server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_solution_incomplete FAILED [100%]

=================================== FAILURES ===================================
______________________ test_registration_malformed_header ______________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>

    def test_registration_malformed_header(test_client, init_db):
        """
        Test when a request is made to /register that has mal-formatted request header
        that contains the Google Access token.
        """
>       response = test_client.post('/register', headers={'Authorization': '2342351231asdb'})

server/tests/integration/test_authentication.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/werkzeug/test.py:1016: in post
    return self.open(*args, **kw)
server/venv/lib/python3.8/site-packages/flask/testing.py:222: in open
    return Client.open(
server/venv/lib/python3.8/site-packages/werkzeug/test.py:970: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
server/venv/lib/python3.8/site-packages/werkzeug/test.py:861: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
server/venv/lib/python3.8/site-packages/werkzeug/test.py:1096: in run_wsgi_app
    app_rv = app(environ, start_response)
server/venv/lib/python3.8/site-packages/flask/app.py:2464: in __call__
    return self.wsgi_app(environ, start_response)
server/venv/lib/python3.8/site-packages/flask/app.py:2450: in wsgi_app
    response = self.handle_exception(e)
server/venv/lib/python3.8/site-packages/flask_restful/__init__.py:272: in error_router
    return original_handler(e)
server/venv/lib/python3.8/site-packages/flask/app.py:1867: in handle_exception
    reraise(exc_type, exc_value, tb)
server/venv/lib/python3.8/site-packages/flask/_compat.py:38: in reraise
    raise value.with_traceback(tb)
server/venv/lib/python3.8/site-packages/flask/app.py:2447: in wsgi_app
    response = self.full_dispatch_request()
server/venv/lib/python3.8/site-packages/flask/app.py:1952: in full_dispatch_request
    rv = self.handle_user_exception(e)
server/venv/lib/python3.8/site-packages/flask_restful/__init__.py:272: in error_router
    return original_handler(e)
server/venv/lib/python3.8/site-packages/flask/app.py:1821: in handle_user_exception
    reraise(exc_type, exc_value, tb)
server/venv/lib/python3.8/site-packages/flask/_compat.py:38: in reraise
    raise value.with_traceback(tb)
server/venv/lib/python3.8/site-packages/flask/app.py:1948: in full_dispatch_request
    rv = self.preprocess_request()
server/venv/lib/python3.8/site-packages/flask/app.py:2242: in preprocess_request
    rv = func()
server/resources/authentication.py:18: in verify_token
    result = _verify_token(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

incoming_request = <Request 'http://localhost/register' [POST]>

    def _verify_token(incoming_request):
        """
        The implementation of verification of token; separated from the method above for ease in testing.
        """
        if 'Authorization' not in incoming_request.headers:
            return {'message': 'Request denied access',
                    'reason': 'Authorization header missing. Please provide an '
                               'OAuth2 Token with your request'}, 400
    
        auth_header = incoming_request.headers.get('Authorization')
        if 'Bearer ' in auth_header:
            return {'message': 'Request denied access',
                    'reason': "Malformed authorization header provided. Please make sure to "
                               "specify the header prefix correctly as 'Bearer ' and try again."}, 400
    
        # validate the token with Google
>       access_token = auth_header.split("Bearer ")[1]
E       IndexError: list index out of range

server/resources/authentication.py:39: IndexError
_________________ test_registration_verification_token_invalid _________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_error = None

    def test_registration_verification_token_invalid(test_client, init_db, verification_error):
        """
        Test when a request is made to /register that has a bad token.
        """
        response = test_client.post('/register', headers={'Authorization': 'Bearer 2342351231asdb'})
>       assert response.status_code == 401
E       assert 400 == 401
E         +400
E         -401

server/tests/integration/test_authentication.py:103: AssertionError
______________________ test_registration_user_info_error _______________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None, user_info_error = None

    def test_registration_user_info_error(test_client, init_db, verification_true, user_info_error):
        """
        Test when a request is made to /register, but the user info Google endpoint returned an error.
        """
        response = test_client.post('/register', headers={'Authorization': 'Bearer 2342351231asdb'})
        assert response.status_code == 400
>       assert response.json == {'message': 'User could not be registered',
                                 'reason': 'User identity could not be found; valid OAuth2 access token not received.'}
E       assert {'message': '...d try again.'} == {'message': '...ot received.'}
E         Differing items:
E         {'message': 'Request denied access'} != {'message': 'User could not be registered'}
E         {'reason': "Malformed authorization header provided. Please make sure to specify the header prefix correctly as 'Bearer ' and try again."} != {'reason': 'User identity could not be found; valid OAuth2 access token not received.'}
E         Full diff:
E           {
E         -  'message': 'User could not be registered',
E         -  'reason': 'User identity could not be found; valid OAuth2 access token not '...
E         
E         ...Full output truncated (6 lines hidden), use '-vv' to show

server/tests/integration/test_authentication.py:114: AssertionError
_________________ test_registration_token_valid_missing_info1 __________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7ffedc67bf40>
test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_registration_token_valid_missing_info1(monkeypatch, test_client, init_db, verification_true):
        """
        Test when verification of the token succeeds, but user information collection fails
        """
        def mock_user_info(*args, **kwargs):
            return {
                "id": "103207744267402488580",
                "verified_email": True,
                "name": "Jane Doe",
                "given_name": "Jane",
                "family_name": "Doe",
                "picture": "https://lh3.googleusercontent.com/a-/AOh14Gh2my8WQqJudGC0Ft2A1Q-jrnVtxYTyrQkrIj6LNVU=s91-c",
                "locale": "en",
                "hd": "columbia.edu"
            }
        monkeypatch.setattr(GoogleAuth, "get_user_information", mock_user_info)
    
        response = test_client.post('/register', headers={'Authorization': 'Bearer 2342351231asdb'})
>       assert response.status_code == 401
E       assert 400 == 401
E         +400
E         -401

server/tests/integration/test_authentication.py:136: AssertionError
_________________ test_registration_token_valid_missing_info2 __________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7ffedc452850>
test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_registration_token_valid_missing_info2(monkeypatch, test_client, init_db, verification_true):
        """
        Test when verification of the token succeeds, but user information collection fails
        """
        def mock_user_info(*args, **kwargs):
            return {
                "email": "janedoe@columbia.edu",
                "verified_email": True,
                "name": "Jane Doe",
                "given_name": "Jane",
                "family_name": "Doe",
                "picture": "https://lh3.googleusercontent.com/a-/AOh14Gh2my8WQqJudGC0Ft2A1Q-jrnVtxYTyrQkrIj6LNVU=s91-c",
                "locale": "en",
                "hd": "columbia.edu"
            }
    
        monkeypatch.setattr(GoogleAuth, "get_user_information", mock_user_info)
    
        response = test_client.post('/register', headers={'Authorization': 'Bearer 2342351231asdb'})
>       assert response.status_code == 401
E       assert 400 == 401
E         +400
E         -401

server/tests/integration/test_authentication.py:161: AssertionError
___________________ test_registration_user_id_already_exists ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7ffedc4b4040>
test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_registration_user_id_already_exists(monkeypatch, test_client, init_db, verification_true):
        """
        Make sure that if the user id already exists, there is no need to re-register them.
        """
        def mock_user_info(*args, **kwargs):
            return {
                "id": "12345",  # this user already exists
            }
    
        monkeypatch.setattr(GoogleAuth, "get_user_information", mock_user_info)
    
        response = test_client.post('/register', headers={'Authorization': 'Bearer 2342351231asdb'})
>       assert response.status_code == 200
E       assert 400 == 200
E         +400
E         -200

server/tests/integration/test_authentication.py:179: AssertionError
______________________ test_successful_user_registration _______________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None, user_info = None

    def test_successful_user_registration(test_client, init_db, verification_true, user_info):
        """
        Make sure that a valid request to register a user is successful.
        """
        response = test_client.post('/register', headers={'Authorization': 'Bearer 2342351231asdb'})
>       assert response.status_code == 200
E       assert 400 == 200
E         +400
E         -200

server/tests/integration/test_authentication.py:188: AssertionError
________________ test_attempt_to_use_game_without_registration _________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7ffedc30b2b0>
test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>

    def test_attempt_to_use_game_without_registration(monkeypatch, test_client, init_db):
        """
        Test that attempts to interact with the game without registering fail.
        """
        def mock_verification(*args, **kwargs):
            return {
                "issued_to": "984247564103-2vfoopeqjoqtd21tsp3namg9sijus9ai.apps.googleusercontent.com",
                "audience": "984247564103-2vfoopeqjoqtd21tsp3namg9sijus9ai.apps.googleusercontent.com",
                "user_id": "111111111",
                "scope": "https://www.googleapis.com/auth/userinfo.email",
                "expires_in": 3588,
                "email": "unregistered_user@gmail.com",
                "verified_email": True,
                "access_type": "offline"
            }
    
        monkeypatch.setattr(GoogleAuth, "validate_token", mock_verification)
        response = test_client.get('/puzzles', headers={'Authorization': 'Bearer 2342351231asdb'})
>       assert response.status_code == 401
E       assert 400 == 401
E         +400
E         -401

server/tests/integration/test_sudoku_endpoints.py:46: AssertionError
_______________________ test_get_all_puzzles_no_puzzles ________________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_get_all_puzzles_no_puzzles(test_client, init_db, verification_true):
        """
        Test the response when the user makes a request to get their puzzles, but they don't have any.
        """
        response = test_client.get('/puzzles', headers={'Authorization': 'Bearer 2342351231asdb'})
>       assert response.status_code == 200
E       assert 400 == 200
E         +400
E         -200

server/tests/integration/test_sudoku_endpoints.py:57: AssertionError
_________________________ test_get_nonexistent_puzzle __________________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_get_nonexistent_puzzle(test_client, init_db, verification_true):
        """
        Test the response when a user makes a request for a puzzle that doesn't exist.
        """
        response = test_client.get('/puzzles/10', headers={'Authorization': 'Bearer 2342351231asdb'})
>       assert response.status_code == 404
E       assert 400 == 404
E         +400
E         -404

server/tests/integration/test_sudoku_endpoints.py:66: AssertionError
__________________________ test_save_new_puzzle_valid __________________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_save_new_puzzle_valid(test_client, init_db, verification_true):
        """
        Test the response when a user makes a valid request to create a new sudoku puzzle
        """
        response = test_client.post('/puzzles',
                                    data=dict(difficulty=0.5, size=3),
                                    headers={'Authorization': 'Bearer 2342351231asdb'})
>       assert response.status_code == 200
E       assert 400 == 200
E         +400
E         -200

server/tests/integration/test_sudoku_endpoints.py:78: AssertionError
________________ test_save_new_puzzle_invalid_difficulty_small _________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_save_new_puzzle_invalid_difficulty_small(test_client, init_db, verification_true):
        """
        Test the response when a user makes a request to create a puzzle of invalid difficulty (too high).
        """
        response = test_client.post('/puzzles',
                                    data=dict(difficulty=1.1, size=3),
                                    headers={'Authorization': 'Bearer 2342351231asdb'})
        assert response.status_code == 400
>       assert response.json == {
            'message': 'Failed to create new Sudoku Puzzle',
            'reason': 'Difficulty levels must range between 0.01 and 0.99. Got 1.1.'
        }
E       assert {'message': '...d try again.'} == {'message': '...99. Got 1.1.'}
E         Differing items:
E         {'message': 'Request denied access'} != {'message': 'Failed to create new Sudoku Puzzle'}
E         {'reason': "Malformed authorization header provided. Please make sure to specify the header prefix correctly as 'Bearer ' and try again."} != {'reason': 'Difficulty levels must range between 0.01 and 0.99. Got 1.1.'}
E         Full diff:
E           {
E         -  'message': 'Failed to create new Sudoku Puzzle',
E         -  'reason': 'Difficulty levels must range between 0.01 and 0.99. Got 1.1.',...
E         
E         ...Full output truncated (5 lines hidden), use '-vv' to show

server/tests/integration/test_sudoku_endpoints.py:95: AssertionError
________________ test_save_new_puzzle_invalid_difficulty_large _________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_save_new_puzzle_invalid_difficulty_large(test_client, init_db, verification_true):
        """
        Test the response when a user makes a request to create a puzzle of invalid difficulty (too low).
        """
        response = test_client.post('/puzzles',
                                    data=dict(difficulty=0.0, size=3),
                                    headers={'Authorization': 'Bearer 2342351231asdb'})
        assert response.status_code == 400
>       assert response.json == {
            'message': 'Failed to create new Sudoku Puzzle',
            'reason': 'Difficulty levels must range between 0.01 and 0.99. Got 0.0.'
        }
E       assert {'message': '...d try again.'} == {'message': '...99. Got 0.0.'}
E         Differing items:
E         {'message': 'Request denied access'} != {'message': 'Failed to create new Sudoku Puzzle'}
E         {'reason': "Malformed authorization header provided. Please make sure to specify the header prefix correctly as 'Bearer ' and try again."} != {'reason': 'Difficulty levels must range between 0.01 and 0.99. Got 0.0.'}
E         Full diff:
E           {
E         -  'message': 'Failed to create new Sudoku Puzzle',
E         -  'reason': 'Difficulty levels must range between 0.01 and 0.99. Got 0.0.',...
E         
E         ...Full output truncated (5 lines hidden), use '-vv' to show

server/tests/integration/test_sudoku_endpoints.py:109: AssertionError
___________________ test_save_new_puzzle_invalid_size_large ____________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_save_new_puzzle_invalid_size_large(test_client, init_db, verification_true):
        """
        Test the response when a user makes a request to create a puzzle of invalid size (too large).
        """
        response = test_client.post('/puzzles',
                                    data=dict(difficulty=0.5, size=10),
                                    headers={'Authorization': 'Bearer 2342351231asdb'})
        assert response.status_code == 400
>       assert response.json == {
            'message': 'Failed to create new Sudoku Puzzle',
            'reason': 'Valid sizes range from 2 to 5. Got 10.'
        }
E       assert {'message': '...d try again.'} == {'message': '...o 5. Got 10.'}
E         Differing items:
E         {'message': 'Request denied access'} != {'message': 'Failed to create new Sudoku Puzzle'}
E         {'reason': "Malformed authorization header provided. Please make sure to specify the header prefix correctly as 'Bearer ' and try again."} != {'reason': 'Valid sizes range from 2 to 5. Got 10.'}
E         Full diff:
E           {
E         -  'message': 'Failed to create new Sudoku Puzzle',
E         -  'reason': 'Valid sizes range from 2 to 5. Got 10.',...
E         
E         ...Full output truncated (5 lines hidden), use '-vv' to show

server/tests/integration/test_sudoku_endpoints.py:123: AssertionError
___________________ test_save_new_puzzle_invalid_size_small ____________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_save_new_puzzle_invalid_size_small(test_client, init_db, verification_true):
        """
        Test the response when a user makes a request to create a puzzle of invalid size (too small).
        """
        response = test_client.post('/puzzles',
                                    data=dict(difficulty=0.5, size=1),
                                    headers={'Authorization': 'Bearer 2342351231asdb'})
        assert response.status_code == 400
>       assert response.json == {
            'message': 'Failed to create new Sudoku Puzzle',
            'reason': 'Valid sizes range from 2 to 5. Got 1.'
        }
E       assert {'message': '...d try again.'} == {'message': '...to 5. Got 1.'}
E         Differing items:
E         {'message': 'Request denied access'} != {'message': 'Failed to create new Sudoku Puzzle'}
E         {'reason': "Malformed authorization header provided. Please make sure to specify the header prefix correctly as 'Bearer ' and try again."} != {'reason': 'Valid sizes range from 2 to 5. Got 1.'}
E         Full diff:
E           {
E         -  'message': 'Failed to create new Sudoku Puzzle',
E         -  'reason': 'Valid sizes range from 2 to 5. Got 1.',...
E         
E         ...Full output truncated (5 lines hidden), use '-vv' to show

server/tests/integration/test_sudoku_endpoints.py:137: AssertionError
________________________ test_get_all_puzzles_for_user _________________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_get_all_puzzles_for_user(test_client, init_db, verification_true):
        """
        Test response for valid request to get all puzzzles associated with user.
        """
        response = test_client.get('/puzzles', headers={'Authorization': 'Bearer 2342351231asdb'})
        expected = {
            'puzzles':
            [
                {
                    'puzzle_id': 3,
                    'completed': False,
                    'difficulty': 0.5,
                    'point_value': 90,
                    'pieces': ["this would ordinarily contain a list of pieces; they're not predictable in tests"],
                    'players': [{'id': 5, 'first_name': 'Joe', 'last_name': 'Biden', 'email': 'jb@biden2020.com'}]
                }
            ]
        }
    
        # cannot test for pieces easily; this is randomly created by the Sudoku library for each round
>       response.json['puzzles'][0].pop('pieces')
E       KeyError: 'puzzles'

server/tests/integration/test_sudoku_endpoints.py:163: KeyError
____________________________ test_get_puzzle_valid _____________________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_get_puzzle_valid(test_client, init_db, verification_true):
        """
        An attempt to get a puzzle with a valid id that is associated with the requesting user should
        be successful.
        """
        response = test_client.get('/puzzles/3', headers={'Authorization': 'Bearer 2342351231asdb'})
        expected = {
            'puzzle_id': 3,
            'completed': False,
            'difficulty': 0.5,
            'point_value': 90,
            'pieces': ['some pieces would go here'],
            'players': [{'id': 5, 'first_name': 'Joe', 'last_name': 'Biden', 'email': 'jb@biden2020.com'}]
        }
    
        # cannot test for pieces easily; this is randomly created by the Sudoku library for each round
>       response.json.pop('pieces')
E       KeyError: 'pieces'

server/tests/integration/test_sudoku_endpoints.py:186: KeyError
___________________ test_attempt_to_get_unaffiliated_puzzle ____________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_attempt_to_get_unaffiliated_puzzle(test_client, init_db, verification_true):
        """
        An attempting to get a puzzle with a valid id, but that is not associated with the requesting
        user should not return the puzzle.
        """
        response = test_client.get('/puzzles/1', headers={'Authorization': 'Bearer 2342351231asdb'})
>       assert response.status_code == 404
E       assert 400 == 404
E         +400
E         -404

server/tests/integration/test_sudoku_endpoints.py:198: AssertionError
____________ test_attempt_to_add_player_to_puzzle_already_in_puzzle ____________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_attempt_to_add_player_to_puzzle_already_in_puzzle(test_client, init_db, verification_true):
        """
        Attempt to add player that is already in the puzzle should not re-add the player.
        """
        response = test_client.post('/puzzles/3', headers={'Authorization': 'Bearer 2342351231asdb'})
>       assert response.status_code == 200
E       assert 400 == 200
E         +400
E         -200

server/tests/integration/test_sudoku_endpoints.py:208: AssertionError
____________ test_attempt_to_add_player_to_puzzle_that_doesnt_exist ____________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_attempt_to_add_player_to_puzzle_that_doesnt_exist(test_client, init_db, verification_true):
        """
        Attempt by a player to add themselves to a puzzle that doesn't exist should not be successful.
        """
        response = test_client.post('/puzzles/10', headers={'Authorization': 'Bearer 2342351231asdb'})
        assert response.status_code == 400
>       assert response.json == {'message': 'Attempt to add Joe Biden (id = 5) to puzzle 10 failed.',
                                 'reason': 'You cannot join a puzzle if the puzzle does not exist and have at '
                                           'least 1 player.'}
E       assert {'message': '...d try again.'} == {'message': '...st 1 player.'}
E         Differing items:
E         {'message': 'Request denied access'} != {'message': 'Attempt to add Joe Biden (id = 5) to puzzle 10 failed.'}
E         {'reason': "Malformed authorization header provided. Please make sure to specify the header prefix correctly as 'Bearer ' and try again."} != {'reason': 'You cannot join a puzzle if the puzzle does not exist and have at least 1 player.'}
E         Full diff:
E           {
E         -  'message': 'Attempt to add Joe Biden (id = 5) to puzzle 10 failed.',
E         -  'reason': 'You cannot join a puzzle if the puzzle does not exist and have at '...
E         
E         ...Full output truncated (6 lines hidden), use '-vv' to show

server/tests/integration/test_sudoku_endpoints.py:218: AssertionError
__________________ test_attempt_to_add_player_to_puzzle_valid __________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_attempt_to_add_player_to_puzzle_valid(test_client, init_db, verification_true):
        """
        Attempt to add player to puzzle that is a valid request should be successful
        """
        response = test_client.post('/puzzles/1', headers={'Authorization': 'Bearer 2342351231asdb'})
>       assert response.status_code == 200
E       assert 400 == 200
E         +400
E         -200

server/tests/integration/test_sudoku_endpoints.py:228: AssertionError
_______________ test_attempt_to_join_puzzle_max_players_reached ________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_attempt_to_join_puzzle_max_players_reached(test_client, init_db, verification_true):
        """
        Attempt to add player to puzzle that is a valid request should be successful.
        """
        # add three more players to puzzle with id = 2; now the board has 4 players
        puzzle_player = PuzzlePlayer(1, 2)
        puzzle_player.save(autocommit=True)
        puzzle_player = PuzzlePlayer(3, 2)
        puzzle_player.save(autocommit=True)
        puzzle_player = PuzzlePlayer(4, 2)
        puzzle_player.save(autocommit=True)
    
        response = test_client.post('/puzzles/2', headers={'Authorization': 'Bearer 2342351231asdb'})
        assert response.status_code == 400
>       assert response.json == {'message': 'Attempt to add Joe Biden (id = 5) to puzzle 2 failed.',
                                 'reason': 'There are already 4 players affiliated with puzzle 2'}
E       assert {'message': '...d try again.'} == {'message': '...ith puzzle 2'}
E         Differing items:
E         {'message': 'Request denied access'} != {'message': 'Attempt to add Joe Biden (id = 5) to puzzle 2 failed.'}
E         {'reason': "Malformed authorization header provided. Please make sure to specify the header prefix correctly as 'Bearer ' and try again."} != {'reason': 'There are already 4 players affiliated with puzzle 2'}
E         Full diff:
E           {
E         -  'message': 'Attempt to add Joe Biden (id = 5) to puzzle 2 failed.',
E         -  'reason': 'There are already 4 players affiliated with puzzle 2',...
E         
E         ...Full output truncated (5 lines hidden), use '-vv' to show

server/tests/integration/test_sudoku_endpoints.py:246: AssertionError
__________________ test_attempt_add_piece_valid_no_value_yet ___________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_attempt_add_piece_valid_no_value_yet(test_client, init_db, verification_true):
        """
        Attempt to add a valid number to a valid position on a sudoku board that is associated with the user.
        """
        # make sure that we know what the status is of the piece that we are attempting to change
>       piece = PuzzlePiece.get_piece(3, 0, 0)

server/tests/integration/test_sudoku_endpoints.py:255: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'server.models.puzzle_pieces.PuzzlePiece'>, puzzle_id = 3
x_coordinate = 0, y_coordinate = 0

    @classmethod
    def get_piece(cls, puzzle_id, x_coordinate, y_coordinate):
        piece = cls.query.filter_by(
            puzzle_id=puzzle_id,
            x_coordinate=x_coordinate,
            y_coordinate=y_coordinate
        ).first()
    
        if not piece:  # this happens when the coordinates do not exist
>           raise PuzzleException(f"No puzzle piece exists at ({x_coordinate}, {y_coordinate}). "
                                  f"This position is off of the puzzle board.")
E           server.models.puzzle_exception.PuzzleException: No puzzle piece exists at (0, 0). This position is off of the puzzle board.

server/models/puzzle_pieces.py:41: PuzzleException
_________________ test_attempt_add_piece_valid_override_value __________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_attempt_add_piece_valid_override_value(test_client, init_db, verification_true):
        """
        Attempt to add a valid number to a valid position on a sudoku board that is associated with the user.
        """
        # make sure that we know what the status is of the piece that we are attempting to change
>       piece = PuzzlePiece.get_piece(3, 0, 0)

server/tests/integration/test_sudoku_endpoints.py:281: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'server.models.puzzle_pieces.PuzzlePiece'>, puzzle_id = 3
x_coordinate = 0, y_coordinate = 0

    @classmethod
    def get_piece(cls, puzzle_id, x_coordinate, y_coordinate):
        piece = cls.query.filter_by(
            puzzle_id=puzzle_id,
            x_coordinate=x_coordinate,
            y_coordinate=y_coordinate
        ).first()
    
        if not piece:  # this happens when the coordinates do not exist
>           raise PuzzleException(f"No puzzle piece exists at ({x_coordinate}, {y_coordinate}). "
                                  f"This position is off of the puzzle board.")
E           server.models.puzzle_exception.PuzzleException: No puzzle piece exists at (0, 0). This position is off of the puzzle board.

server/models/puzzle_pieces.py:41: PuzzleException
_________ test_attempt_add_piece_puzzle_player_is_not_affiliated_with __________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_attempt_add_piece_puzzle_player_is_not_affiliated_with(test_client, init_db, verification_true):
        """
        Attempt to add a valid number to a valid position on a sudoku board that is NOT associated with the user.
        """
        response = test_client.post(
            '/puzzles/2/piece', data=dict(
                x_coordinate=0,
                y_coordinate=0,
                value=2
            ), headers={'Authorization': 'Bearer 2342351231asdb'}
        )
>       assert response.status_code == 404
E       assert 400 == 404
E         +400
E         -404

server/tests/integration/test_sudoku_endpoints.py:314: AssertionError
___________________ test_attempt_add_piece_invalid_piece_low ___________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_attempt_add_piece_invalid_piece_low(test_client, init_db, verification_true):
        """
        Attempt to add a INVALID number to a valid position on a sudoku board that is associated with the user.
        """
>       piece = PuzzlePiece.get_piece(3, 0, 0)

server/tests/integration/test_sudoku_endpoints.py:322: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'server.models.puzzle_pieces.PuzzlePiece'>, puzzle_id = 3
x_coordinate = 0, y_coordinate = 0

    @classmethod
    def get_piece(cls, puzzle_id, x_coordinate, y_coordinate):
        piece = cls.query.filter_by(
            puzzle_id=puzzle_id,
            x_coordinate=x_coordinate,
            y_coordinate=y_coordinate
        ).first()
    
        if not piece:  # this happens when the coordinates do not exist
>           raise PuzzleException(f"No puzzle piece exists at ({x_coordinate}, {y_coordinate}). "
                                  f"This position is off of the puzzle board.")
E           server.models.puzzle_exception.PuzzleException: No puzzle piece exists at (0, 0). This position is off of the puzzle board.

server/models/puzzle_pieces.py:41: PuzzleException
__________________ test_attempt_add_piece_invalid_piece_high ___________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_attempt_add_piece_invalid_piece_high(test_client, init_db, verification_true):
        """
        Attempt to add a INVALID number to a valid position on a sudoku board that is associated with the user.
        """
>       piece = PuzzlePiece.get_piece(3, 0, 0)

server/tests/integration/test_sudoku_endpoints.py:345: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'server.models.puzzle_pieces.PuzzlePiece'>, puzzle_id = 3
x_coordinate = 0, y_coordinate = 0

    @classmethod
    def get_piece(cls, puzzle_id, x_coordinate, y_coordinate):
        piece = cls.query.filter_by(
            puzzle_id=puzzle_id,
            x_coordinate=x_coordinate,
            y_coordinate=y_coordinate
        ).first()
    
        if not piece:  # this happens when the coordinates do not exist
>           raise PuzzleException(f"No puzzle piece exists at ({x_coordinate}, {y_coordinate}). "
                                  f"This position is off of the puzzle board.")
E           server.models.puzzle_exception.PuzzleException: No puzzle piece exists at (0, 0). This position is off of the puzzle board.

server/models/puzzle_pieces.py:41: PuzzleException
_________________ test_attempt_add_piece_invalid_position_high _________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_attempt_add_piece_invalid_position_high(test_client, init_db, verification_true):
        """
        Attempt to add a valid number to an INVALID position on a sudoku board that is associated with the user.
        """
        response = test_client.post(
            '/puzzles/3/piece', data=dict(
                x_coordinate=100,
                y_coordinate=100,
                value=2
            ), headers={'Authorization': 'Bearer 2342351231asdb'}
        )
        assert response.status_code == 400
>       assert response.json == {
            'message': 'Attempt to save 2 at (100, 100) on puzzle_id 3 by user Joe Biden (id = 5) was unsuccessful',
            'reason': 'Coordinates provided (100, 100) are outside the range of the puzzle. '
                      'Available coordinates are (0, 0) to (9, 9).'
        }
E       assert {'message': '...d try again.'} == {'message': '...) to (9, 9).'}
E         Differing items:
E         {'message': 'Request denied access'} != {'message': 'Attempt to save 2 at (100, 100) on puzzle_id 3 by user Joe Biden (id = 5) was unsuccessful'}
E         {'reason': "Malformed authorization header provided. Please make sure to specify the header prefix correctly as 'Bearer ' and try again."} != {'reason': 'Coordinates provided (100, 100) are outside the range of the puzzle. Available coordinates are (0, 0) to (9, 9).'}
E         Full diff:
E           {
E         +  'message': 'Request denied access',
E         +  'reason': 'Malformed authorization header provided. Please make sure to '...
E         
E         ...Full output truncated (7 lines hidden), use '-vv' to show

server/tests/integration/test_sudoku_endpoints.py:376: AssertionError
_________________ test_attempt_add_piece_invalid_position_low __________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_attempt_add_piece_invalid_position_low(test_client, init_db, verification_true):
        """
        Attempt to add a valid number to an INVALID position on a sudoku board that is associated with the user.
        """
        response = test_client.post(
            '/puzzles/3/piece', data=dict(
                x_coordinate=-1,
                y_coordinate=-1,
                value=2
            ), headers={'Authorization': 'Bearer 2342351231asdb'}
        )
        assert response.status_code == 400
>       assert response.json == {
            'message': 'Attempt to save 2 at (-1, -1) on puzzle_id 3 by user Joe Biden (id = 5) was unsuccessful',
            'reason': 'Coordinates provided (-1, -1) are outside the range of the puzzle. '
                      'Available coordinates are (0, 0) to (9, 9).'
        }
E       assert {'message': '...d try again.'} == {'message': '...) to (9, 9).'}
E         Differing items:
E         {'message': 'Request denied access'} != {'message': 'Attempt to save 2 at (-1, -1) on puzzle_id 3 by user Joe Biden (id = 5) was unsuccessful'}
E         {'reason': "Malformed authorization header provided. Please make sure to specify the header prefix correctly as 'Bearer ' and try again."} != {'reason': 'Coordinates provided (-1, -1) are outside the range of the puzzle. Available coordinates are (0, 0) to (9, 9).'}
E         Full diff:
E           {
E         +  'message': 'Request denied access',
E         +  'reason': 'Malformed authorization header provided. Please make sure to '...
E         
E         ...Full output truncated (7 lines hidden), use '-vv' to show

server/tests/integration/test_sudoku_endpoints.py:395: AssertionError
_____________________ test_get_puzzle_solution_incomplete ______________________

test_client = <FlaskClient <Flask 'server.server'>>
init_db = <SQLAlchemy engine=postgres://vkxyhzzjvibhhg:***@ec2-34-200-106-49.compute-1.amazonaws.com:5432/dsmbl1k8cfr5h>
verification_true = None

    def test_get_puzzle_solution_incomplete(test_client, init_db, verification_true):
        """
        Assert that it is possible to obtain the puzzle solution via the solution endpoint.
        ## TEST IN PROGRESS  -- THIS PROBABLY SHOULD BE BETTER ##
        """
        response = test_client.get('/puzzles/3/solution',
                                   headers={'Authorization': 'Bearer 2342351231asdb'})
    
>       assert response.status_code == 200
E       assert 400 == 200
E         +400
E         -200

server/tests/integration/test_sudoku_endpoints.py:410: AssertionError
=============================== warnings summary ===============================
server/tests/integration/test_authentication.py::test_registration_missing_header
  /Users/meganfrenkel/Workspace/KERMit/server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:254: SADeprecationWarning: The 'postgres' dialect name has been renamed to 'postgresql'
    loader = self.auto_fn(name)

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ============================
FAILED server/tests/integration/test_authentication.py::test_registration_malformed_header
FAILED server/tests/integration/test_authentication.py::test_registration_verification_token_invalid
FAILED server/tests/integration/test_authentication.py::test_registration_user_info_error
FAILED server/tests/integration/test_authentication.py::test_registration_token_valid_missing_info1
FAILED server/tests/integration/test_authentication.py::test_registration_token_valid_missing_info2
FAILED server/tests/integration/test_authentication.py::test_registration_user_id_already_exists
FAILED server/tests/integration/test_authentication.py::test_successful_user_registration
FAILED server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_use_game_without_registration
FAILED server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_no_puzzles
FAILED server/tests/integration/test_sudoku_endpoints.py::test_get_nonexistent_puzzle
FAILED server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_valid
FAILED server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_small
FAILED server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_large
FAILED server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_large
FAILED server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_small
FAILED server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_for_user
FAILED server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_valid
FAILED server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_get_unaffiliated_puzzle
FAILED server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_already_in_puzzle
FAILED server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_that_doesnt_exist
FAILED server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_valid
FAILED server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_join_puzzle_max_players_reached
FAILED server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_no_value_yet
FAILED server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_override_value
FAILED server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_puzzle_player_is_not_affiliated_with
FAILED server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_low
FAILED server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_high
FAILED server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_high
FAILED server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_low
FAILED server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_solution_incomplete
=================== 30 failed, 1 passed, 1 warning in 25.70s ===================
