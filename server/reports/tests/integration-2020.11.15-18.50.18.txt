============================= test session starts ==============================
platform darwin -- Python 3.8.3, pytest-6.1.2, py-1.9.0, pluggy-0.13.1 -- /Users/meganfrenkel/Workspace/KERMit/server/venv/bin/python
cachedir: .pytest_cache
rootdir: /Users/meganfrenkel/Workspace/KERMit
plugins: mock-3.3.1
collecting ... collected 31 items

server/tests/integration/test_authentication.py::test_registration_missing_header ERROR [  3%]
server/tests/integration/test_authentication.py::test_registration_malformed_header ERROR [  6%]
server/tests/integration/test_authentication.py::test_registration_verification_token_invalid ERROR [  9%]
server/tests/integration/test_authentication.py::test_registration_user_info_error ERROR [ 12%]
server/tests/integration/test_authentication.py::test_registration_token_valid_missing_info1 ERROR [ 16%]
server/tests/integration/test_authentication.py::test_registration_token_valid_missing_info2 ERROR [ 19%]
server/tests/integration/test_authentication.py::test_registration_user_id_already_exists ERROR [ 22%]
server/tests/integration/test_authentication.py::test_successful_user_registration ERROR [ 25%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_use_game_without_registration ERROR [ 29%]
server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_no_puzzles ERROR [ 32%]
server/tests/integration/test_sudoku_endpoints.py::test_get_nonexistent_puzzle ERROR [ 35%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_valid ERROR [ 38%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_small ERROR [ 41%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_large ERROR [ 45%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_large ERROR [ 48%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_small ERROR [ 51%]
server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_for_user ERROR [ 54%]
server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_valid ERROR [ 58%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_get_unaffiliated_puzzle ERROR [ 61%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_already_in_puzzle ERROR [ 64%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_that_doesnt_exist ERROR [ 67%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_valid ERROR [ 70%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_join_puzzle_max_players_reached ERROR [ 74%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_no_value_yet ERROR [ 77%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_override_value ERROR [ 80%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_puzzle_player_is_not_affiliated_with ERROR [ 83%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_low ERROR [ 87%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_high ERROR [ 90%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_high ERROR [ 93%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_low ERROR [ 96%]
server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_solution_incomplete ERROR [100%]

==================================== ERRORS ====================================
______________ ERROR at setup of test_registration_missing_header ______________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a212400>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a0d6400>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a202130; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a202130; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_____________ ERROR at setup of test_registration_malformed_header _____________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a212400>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a0d6400>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a202130; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a202130; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
________ ERROR at setup of test_registration_verification_token_invalid ________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a212400>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a0d6400>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a202130; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a202130; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_____________ ERROR at setup of test_registration_user_info_error ______________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a212400>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a0d6400>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a202130; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a202130; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
________ ERROR at setup of test_registration_token_valid_missing_info1 _________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a212400>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a0d6400>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a202130; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a202130; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
________ ERROR at setup of test_registration_token_valid_missing_info2 _________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a212400>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a0d6400>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a202130; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a202130; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
__________ ERROR at setup of test_registration_user_id_already_exists __________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a212400>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a0d6400>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a202130; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a202130; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_____________ ERROR at setup of test_successful_user_registration ______________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a212400>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a0d6400>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a202130; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a202130; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a212940>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_______ ERROR at setup of test_attempt_to_use_game_without_registration ________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
______________ ERROR at setup of test_get_all_puzzles_no_puzzles _______________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
________________ ERROR at setup of test_get_nonexistent_puzzle _________________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_________________ ERROR at setup of test_save_new_puzzle_valid _________________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_______ ERROR at setup of test_save_new_puzzle_invalid_difficulty_small ________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_______ ERROR at setup of test_save_new_puzzle_invalid_difficulty_large ________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
__________ ERROR at setup of test_save_new_puzzle_invalid_size_large ___________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
__________ ERROR at setup of test_save_new_puzzle_invalid_size_small ___________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_______________ ERROR at setup of test_get_all_puzzles_for_user ________________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
___________________ ERROR at setup of test_get_puzzle_valid ____________________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
__________ ERROR at setup of test_attempt_to_get_unaffiliated_puzzle ___________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
___ ERROR at setup of test_attempt_to_add_player_to_puzzle_already_in_puzzle ___

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
___ ERROR at setup of test_attempt_to_add_player_to_puzzle_that_doesnt_exist ___

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_________ ERROR at setup of test_attempt_to_add_player_to_puzzle_valid _________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
______ ERROR at setup of test_attempt_to_join_puzzle_max_players_reached _______

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_________ ERROR at setup of test_attempt_add_piece_valid_no_value_yet __________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
________ ERROR at setup of test_attempt_add_piece_valid_override_value _________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_ ERROR at setup of test_attempt_add_piece_puzzle_player_is_not_affiliated_with _

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
__________ ERROR at setup of test_attempt_add_piece_invalid_piece_low __________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_________ ERROR at setup of test_attempt_add_piece_invalid_piece_high __________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
________ ERROR at setup of test_attempt_add_piece_invalid_position_high ________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
________ ERROR at setup of test_attempt_add_piece_invalid_position_low _________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
____________ ERROR at setup of test_get_puzzle_solution_incomplete _____________

self = <sqlalchemy.engine.base.Connection object at 0x7fbc4a7c5bb0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fbc4a2128e0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fbc4a7c5c40>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # create a bunch of test users
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')  # user with id = 1
>       integration_tester.save()

server/tests/integration/test_setup.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:32: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fbc4a04e5b0>
cursor = <cursor object at 0x7fbc4a2026d0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fbc4a7c5e20>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
=============================== warnings summary ===============================
server/tests/integration/test_authentication.py::test_registration_missing_header
  /Users/meganfrenkel/Workspace/KERMit/server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:254: SADeprecationWarning: The 'postgres' dialect name has been renamed to 'postgresql'
    loader = self.auto_fn(name)

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ============================
ERROR server/tests/integration/test_authentication.py::test_registration_missing_header
ERROR server/tests/integration/test_authentication.py::test_registration_malformed_header
ERROR server/tests/integration/test_authentication.py::test_registration_verification_token_invalid
ERROR server/tests/integration/test_authentication.py::test_registration_user_info_error
ERROR server/tests/integration/test_authentication.py::test_registration_token_valid_missing_info1
ERROR server/tests/integration/test_authentication.py::test_registration_token_valid_missing_info2
ERROR server/tests/integration/test_authentication.py::test_registration_user_id_already_exists
ERROR server/tests/integration/test_authentication.py::test_successful_user_registration
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_use_game_without_registration
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_no_puzzles
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_nonexistent_puzzle
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_valid
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_small
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_large
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_large
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_small
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_for_user
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_valid
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_get_unaffiliated_puzzle
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_already_in_puzzle
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_that_doesnt_exist
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_valid
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_join_puzzle_max_players_reached
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_no_value_yet
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_override_value
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_puzzle_player_is_not_affiliated_with
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_low
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_high
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_high
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_low
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_solution_incomplete
======================== 1 warning, 31 errors in 11.19s ========================
