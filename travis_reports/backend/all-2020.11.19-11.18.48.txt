============================= test session starts ==============================
platform darwin -- Python 3.8.3, pytest-6.1.2, py-1.9.0, pluggy-0.13.1 -- /Users/meganfrenkel/Workspace/KERMit/server/venv/bin/python
cachedir: .pytest_cache
rootdir: /Users/meganfrenkel/Workspace/KERMit
plugins: mock-3.3.1
collecting ... collected 132 items

server/tests/integration/test_authentication.py::test_registration_missing_header ERROR [  0%]
server/tests/integration/test_authentication.py::test_registration_malformed_header ERROR [  1%]
server/tests/integration/test_authentication.py::test_registration_verification_token_invalid ERROR [  2%]
server/tests/integration/test_authentication.py::test_registration_user_info_error ERROR [  3%]
server/tests/integration/test_authentication.py::test_register_token_valid_missing_info1 ERROR [  3%]
server/tests/integration/test_authentication.py::test_register_token_valid_missing_info2 ERROR [  4%]
server/tests/integration/test_authentication.py::test_registration_user_id_already_exists ERROR [  5%]
server/tests/integration/test_authentication.py::test_successful_user_registration ERROR [  6%]
server/tests/integration/test_leaderboard.py::test_get_leaders_no_completed_puzzle ERROR [  6%]
server/tests/integration/test_leaderboard.py::test_get_leaders_completed_puzzles ERROR [  7%]
server/tests/integration/test_leaderboard.py::test_get_leaders_completed_puzzles_limit2 ERROR [  8%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_use_game_without_registration ERROR [  9%]
server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_no_puzzles ERROR [  9%]
server/tests/integration/test_sudoku_endpoints.py::test_get_nonexistent_puzzle ERROR [ 10%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_valid ERROR [ 11%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_small ERROR [ 12%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_large ERROR [ 12%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_large ERROR [ 13%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_small ERROR [ 14%]
server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_for_user ERROR [ 15%]
server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_valid ERROR [ 15%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_get_unaffiliated_puzzle ERROR [ 16%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_already_in_puzzle ERROR [ 17%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_that_doesnt_exist ERROR [ 18%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_valid ERROR [ 18%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_join_puzzle_max_players_reached ERROR [ 19%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_no_value_yet ERROR [ 20%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_override_value ERROR [ 21%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_player_is_not_affiliated_with ERROR [ 21%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_low ERROR [ 22%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_high ERROR [ 23%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_high ERROR [ 24%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_low ERROR [ 25%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_remove_piece ERROR [ 25%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_remove_static_piece ERROR [ 26%]
server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_solution_incomplete ERROR [ 27%]
server/tests/unit/test_authentication.py::test_authorize_token_missing_header PASSED [ 28%]
server/tests/unit/test_authentication.py::test_authorize_token_missing_header2 PASSED [ 28%]
server/tests/unit/test_authentication.py::test_authorize_token_malformed_header PASSED [ 29%]
server/tests/unit/test_authentication.py::test_authorize_token_validation_error PASSED [ 30%]
server/tests/unit/test_authentication.py::test_authorize_token_validation_success_register PASSED [ 31%]
server/tests/unit/test_authentication.py::test_authorize_token_validation_success PASSED [ 31%]
server/tests/unit/test_authentication.py::test_authorize_token_validation_not_registered PASSED [ 32%]
server/tests/unit/test_authentication.py::test_register PASSED           [ 33%]
server/tests/unit/test_authentication.py::test_register_missing_info_email PASSED [ 34%]
server/tests/unit/test_authentication.py::test_register_missing_info_id PASSED [ 34%]
server/tests/unit/test_authentication.py::test_register_error_googleauth PASSED [ 35%]
server/tests/unit/test_authentication.py::test_register_exception PASSED [ 36%]
server/tests/unit/test_authentication.py::test_register_no_user_yet PASSED [ 37%]
server/tests/unit/test_authentication.py::test_register_exception_db PASSED [ 37%]
server/tests/unit/test_google_auth.py::test_validate_token PASSED        [ 38%]
server/tests/unit/test_google_auth.py::test_get_user_information PASSED  [ 39%]
server/tests/unit/test_leaderboard.py::test_get_leaderboard_no_leaders PASSED [ 40%]
server/tests/unit/test_leaderboard.py::test_get_leaderboard PASSED       [ 40%]
server/tests/unit/test_player.py::test_save_commit PASSED                [ 41%]
server/tests/unit/test_player.py::test_save PASSED                       [ 42%]
server/tests/unit/test_player.py::test_find_all_puzzles_for_player PASSED [ 43%]
server/tests/unit/test_player.py::test_find_players_for_puzzle PASSED    [ 43%]
server/tests/unit/test_player.py::test_add_player_to_puzzle_already_too_many_players PASSED [ 44%]
server/tests/unit/test_player.py::test_add_player_to_puzzle_player_doesnt_exist PASSED [ 45%]
server/tests/unit/test_player.py::test_add_player_to_puzzle_ok PASSED    [ 46%]
server/tests/unit/test_player.py::test_to_player_to_str PASSED           [ 46%]
server/tests/unit/test_puzzle_exception.py::test_get_message PASSED      [ 47%]
server/tests/unit/test_puzzle_pieces.py::test_find_all_pieces PASSED     [ 48%]
server/tests/unit/test_puzzle_pieces.py::test_get_piece PASSED           [ 49%]
server/tests/unit/test_puzzle_pieces.py::test_get_piece_none PASSED      [ 50%]
server/tests/unit/test_puzzle_pieces.py::test_save_autocommit PASSED     [ 50%]
server/tests/unit/test_puzzle_pieces.py::test_save PASSED                [ 51%]
server/tests/unit/test_puzzle_pieces.py::test_update_success PASSED      [ 52%]
server/tests/unit/test_puzzle_pieces.py::test_update_fail_static PASSED  [ 53%]
server/tests/unit/test_puzzle_pieces.py::test_get_as_str PASSED          [ 53%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_valid_defaults PASSED [ 54%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_valid_specification PASSED [ 55%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_invalid_difficulty_str PASSED [ 56%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_invalid_difficulty_too_low PASSED [ 56%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_invalid_difficulty_too_high PASSED [ 57%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_invalid_size_str PASSED [ 58%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_invalid_size_too_low PASSED [ 59%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_invalid_size_too_high PASSED [ 59%]
server/tests/unit/test_sudoku_puzzle.py::test_set_point_value1 PASSED    [ 60%]
server/tests/unit/test_sudoku_puzzle.py::test_set_point_value2 PASSED    [ 61%]
server/tests/unit/test_sudoku_puzzle.py::test_get_pieces_as_arr_all PASSED [ 62%]
server/tests/unit/test_sudoku_puzzle.py::test_get_pieces_as_arr_static_only PASSED [ 62%]
server/tests/unit/test_sudoku_puzzle.py::test_recreate_original_puzzle PASSED [ 63%]
server/tests/unit/test_sudoku_puzzle.py::test_check_for_completion_null_values PASSED [ 64%]
server/tests/unit/test_sudoku_puzzle.py::test_check_for_completion_complete PASSED [ 65%]
server/tests/unit/test_sudoku_puzzle.py::test_check_for_completion_incorrect_values PASSED [ 65%]
server/tests/unit/test_sudoku_puzzle.py::test_check_discrepancies_none PASSED [ 66%]
server/tests/unit/test_sudoku_puzzle.py::test_check_discrepancies_many_incorrect PASSED [ 67%]
server/tests/unit/test_sudoku_puzzle.py::test_check_discrepancies_incomplete_puzzle PASSED [ 68%]
server/tests/unit/test_sudoku_puzzle.py::test_get_puzzle_none PASSED     [ 68%]
server/tests/unit/test_sudoku_puzzle.py::test_get_puzzle_found PASSED    [ 69%]
server/tests/unit/test_sudoku_puzzle.py::test_save PASSED                [ 70%]
server/tests/unit/test_sudoku_puzzle.py::test_save_autocommit PASSED     [ 71%]
server/tests/unit/test_sudoku_puzzle.py::test_attempt_update_complete_puzzle PASSED [ 71%]
server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_coordinate1 PASSED [ 72%]
server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_coordinate2 PASSED [ 73%]
server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_coordinate3 PASSED [ 74%]
server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_coordinate4 PASSED [ 75%]
server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_value1 PASSED [ 75%]
server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_value2 PASSED [ 76%]
server/tests/unit/test_sudoku_puzzle.py::test_update_valid PASSED        [ 77%]
server/tests/unit/test_sudoku_puzzle.py::test_update_valid_complete_puzzle PASSED [ 78%]
server/tests/unit/test_sudoku_puzzle.py::test_set_puzzle_complete PASSED [ 78%]
server/tests/unit/test_sudoku_puzzle.py::test_as_str PASSED              [ 79%]
server/tests/unit/test_sudoku_resources.py::test_sudoku_to_json PASSED   [ 80%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_none PASSED [ 81%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_all PASSED [ 81%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_create_one_known_exception PASSED [ 82%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_create_one_unknown_exception PASSED [ 83%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_create_one PASSED [ 84%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzle_none_retrieved PASSED [ 84%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzle_none_associated PASSED [ 85%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzle_found PASSED [ 86%]
server/tests/unit/test_sudoku_resources.py::test_join_sudoku_puzzle_already_joined PASSED [ 87%]
server/tests/unit/test_sudoku_resources.py::test_join_sudoku_puzzle PASSED [ 87%]
server/tests/unit/test_sudoku_resources.py::test_join_sudoku_puzzle_known_exception PASSED [ 88%]
server/tests/unit/test_sudoku_resources.py::test_join_sudoku_puzzle_unknown_exception PASSED [ 89%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_add_move_not_associated PASSED [ 90%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_add_move PASSED [ 90%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_add_move_invalid PASSED [ 91%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_add_move_exception PASSED [ 92%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_delete_piece PASSED [ 93%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_delete_piece_invalid PASSED [ 93%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_get_solution_not_associated PASSED [ 94%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_get_solution_not_associated_2 PASSED [ 95%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_get_solution PASSED [ 96%]
server/tests/unit/test_user.py::test_create_user PASSED                  [ 96%]
server/tests/unit/test_user.py::test_user_as_str PASSED                  [ 97%]
server/tests/unit/test_user.py::test_user_print PASSED                   [ 98%]
server/tests/unit/test_user.py::test_user_save PASSED                    [ 99%]
server/tests/unit/test_user.py::test_find_by_g_id PASSED                 [100%]

==================================== ERRORS ====================================
______________ ERROR at setup of test_registration_missing_header ______________

self = <sqlalchemy.engine.base.Connection object at 0x7ff0438480d0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff0438481f0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b4f0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b4f0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_____________ ERROR at setup of test_registration_malformed_header _____________

self = <sqlalchemy.engine.base.Connection object at 0x7ff0438480d0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff0438481f0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b4f0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b4f0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
________ ERROR at setup of test_registration_verification_token_invalid ________

self = <sqlalchemy.engine.base.Connection object at 0x7ff0438480d0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff0438481f0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b4f0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b4f0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_____________ ERROR at setup of test_registration_user_info_error ______________

self = <sqlalchemy.engine.base.Connection object at 0x7ff0438480d0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff0438481f0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b4f0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b4f0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
__________ ERROR at setup of test_register_token_valid_missing_info1 ___________

self = <sqlalchemy.engine.base.Connection object at 0x7ff0438480d0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff0438481f0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b4f0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b4f0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
__________ ERROR at setup of test_register_token_valid_missing_info2 ___________

self = <sqlalchemy.engine.base.Connection object at 0x7ff0438480d0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff0438481f0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b4f0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b4f0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
__________ ERROR at setup of test_registration_user_id_already_exists __________

self = <sqlalchemy.engine.base.Connection object at 0x7ff0438480d0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff0438481f0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b4f0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b4f0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_____________ ERROR at setup of test_successful_user_registration ______________

self = <sqlalchemy.engine.base.Connection object at 0x7ff0438480d0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff0438481f0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b4f0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b4f0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043848790>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
____________ ERROR at setup of test_get_leaders_no_completed_puzzle ____________

self = <sqlalchemy.engine.base.Connection object at 0x7ff0446bcac0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff0446bcc10>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff0446bc970>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381bb80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff0446bc970>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381bb80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff0446bc970>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_____________ ERROR at setup of test_get_leaders_completed_puzzles _____________

self = <sqlalchemy.engine.base.Connection object at 0x7ff0446bcac0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff0446bcc10>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff0446bc970>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381bb80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff0446bc970>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381bb80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff0446bc970>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_________ ERROR at setup of test_get_leaders_completed_puzzles_limit2 __________

self = <sqlalchemy.engine.base.Connection object at 0x7ff0446bcac0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff0446bcc10>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff0446bc970>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381bb80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff0446bc970>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381bb80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff0446bc970>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_______ ERROR at setup of test_attempt_to_use_game_without_registration ________

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
______________ ERROR at setup of test_get_all_puzzles_no_puzzles _______________

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
________________ ERROR at setup of test_get_nonexistent_puzzle _________________

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_________________ ERROR at setup of test_save_new_puzzle_valid _________________

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_______ ERROR at setup of test_save_new_puzzle_invalid_difficulty_small ________

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_______ ERROR at setup of test_save_new_puzzle_invalid_difficulty_large ________

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
__________ ERROR at setup of test_save_new_puzzle_invalid_size_large ___________

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
__________ ERROR at setup of test_save_new_puzzle_invalid_size_small ___________

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_______________ ERROR at setup of test_get_all_puzzles_for_user ________________

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
___________________ ERROR at setup of test_get_puzzle_valid ____________________

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
__________ ERROR at setup of test_attempt_to_get_unaffiliated_puzzle ___________

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
___ ERROR at setup of test_attempt_to_add_player_to_puzzle_already_in_puzzle ___

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
___ ERROR at setup of test_attempt_to_add_player_to_puzzle_that_doesnt_exist ___

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_________ ERROR at setup of test_attempt_to_add_player_to_puzzle_valid _________

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
______ ERROR at setup of test_attempt_to_join_puzzle_max_players_reached _______

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_________ ERROR at setup of test_attempt_add_piece_valid_no_value_yet __________

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
________ ERROR at setup of test_attempt_add_piece_valid_override_value _________

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
____ ERROR at setup of test_attempt_add_piece_player_is_not_affiliated_with ____

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
__________ ERROR at setup of test_attempt_add_piece_invalid_piece_low __________

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_________ ERROR at setup of test_attempt_add_piece_invalid_piece_high __________

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
________ ERROR at setup of test_attempt_add_piece_invalid_position_high ________

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
________ ERROR at setup of test_attempt_add_piece_invalid_position_low _________

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_________________ ERROR at setup of test_attempt_remove_piece __________________

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
______________ ERROR at setup of test_attempt_remove_static_piece ______________

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
____________ ERROR at setup of test_get_puzzle_solution_incomplete _____________

self = <sqlalchemy.engine.base.Connection object at 0x7ff043d9d7c0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7ff043848700>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7ff043d9dcd0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:40: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7ff0438dbe80>
cursor = <cursor object at 0x7ff04381b9a0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7ff043d9da30>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
=============================== warnings summary ===============================
server/tests/integration/test_authentication.py::test_registration_missing_header
  /Users/meganfrenkel/Workspace/KERMit/server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:254: SADeprecationWarning: The 'postgres' dialect name has been renamed to 'postgresql'
    loader = self.auto_fn(name)

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ============================
ERROR server/tests/integration/test_authentication.py::test_registration_missing_header
ERROR server/tests/integration/test_authentication.py::test_registration_malformed_header
ERROR server/tests/integration/test_authentication.py::test_registration_verification_token_invalid
ERROR server/tests/integration/test_authentication.py::test_registration_user_info_error
ERROR server/tests/integration/test_authentication.py::test_register_token_valid_missing_info1
ERROR server/tests/integration/test_authentication.py::test_register_token_valid_missing_info2
ERROR server/tests/integration/test_authentication.py::test_registration_user_id_already_exists
ERROR server/tests/integration/test_authentication.py::test_successful_user_registration
ERROR server/tests/integration/test_leaderboard.py::test_get_leaders_no_completed_puzzle
ERROR server/tests/integration/test_leaderboard.py::test_get_leaders_completed_puzzles
ERROR server/tests/integration/test_leaderboard.py::test_get_leaders_completed_puzzles_limit2
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_use_game_without_registration
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_no_puzzles
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_nonexistent_puzzle
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_valid
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_small
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_large
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_large
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_small
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_for_user
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_valid
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_get_unaffiliated_puzzle
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_already_in_puzzle
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_that_doesnt_exist
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_valid
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_join_puzzle_max_players_reached
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_no_value_yet
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_override_value
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_player_is_not_affiliated_with
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_low
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_high
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_high
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_low
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_remove_piece
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_remove_static_piece
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_solution_incomplete
================== 96 passed, 1 warning, 36 errors in 13.94s ===================
