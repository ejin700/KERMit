============================= test session starts ==============================
platform darwin -- Python 3.8.3, pytest-6.1.2, py-1.9.0, pluggy-0.13.1 -- /Users/meganfrenkel/Workspace/KERMit/server/venv/bin/python
cachedir: .pytest_cache
rootdir: /Users/meganfrenkel/Workspace/KERMit
plugins: mock-3.3.1
collecting ... collected 132 items

server/tests/integration/test_authentication.py::test_registration_missing_header ERROR [  0%]
server/tests/integration/test_authentication.py::test_registration_malformed_header ERROR [  1%]
server/tests/integration/test_authentication.py::test_registration_verification_token_invalid ERROR [  2%]
server/tests/integration/test_authentication.py::test_registration_user_info_error ERROR [  3%]
server/tests/integration/test_authentication.py::test_register_token_valid_missing_info1 ERROR [  3%]
server/tests/integration/test_authentication.py::test_register_token_valid_missing_info2 ERROR [  4%]
server/tests/integration/test_authentication.py::test_registration_user_id_already_exists ERROR [  5%]
server/tests/integration/test_authentication.py::test_successful_user_registration ERROR [  6%]
server/tests/integration/test_leaderboard.py::test_get_leaders_no_completed_puzzle ERROR [  6%]
server/tests/integration/test_leaderboard.py::test_get_leaders_completed_puzzles ERROR [  7%]
server/tests/integration/test_leaderboard.py::test_get_leaders_completed_puzzles_limit2 ERROR [  8%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_use_game_without_registration ERROR [  9%]
server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_no_puzzles ERROR [  9%]
server/tests/integration/test_sudoku_endpoints.py::test_get_nonexistent_puzzle ERROR [ 10%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_valid ERROR [ 11%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_small ERROR [ 12%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_large ERROR [ 12%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_large ERROR [ 13%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_small ERROR [ 14%]
server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_for_user ERROR [ 15%]
server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_valid ERROR [ 15%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_get_unaffiliated_puzzle ERROR [ 16%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_already_in_puzzle ERROR [ 17%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_that_doesnt_exist ERROR [ 18%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_valid ERROR [ 18%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_join_puzzle_max_players_reached ERROR [ 19%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_no_value_yet ERROR [ 20%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_override_value ERROR [ 21%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_player_is_not_affiliated_with ERROR [ 21%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_low ERROR [ 22%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_high ERROR [ 23%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_high ERROR [ 24%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_low ERROR [ 25%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_remove_piece ERROR [ 25%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_remove_static_piece ERROR [ 26%]
server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_solution_incomplete ERROR [ 27%]
server/tests/unit/test_authentication.py::test_authorize_token_missing_header PASSED [ 28%]
server/tests/unit/test_authentication.py::test_authorize_token_missing_header2 PASSED [ 28%]
server/tests/unit/test_authentication.py::test_authorize_token_malformed_header PASSED [ 29%]
server/tests/unit/test_authentication.py::test_authorize_token_validation_error PASSED [ 30%]
server/tests/unit/test_authentication.py::test_authorize_token_validation_success_register PASSED [ 31%]
server/tests/unit/test_authentication.py::test_authorize_token_validation_success PASSED [ 31%]
server/tests/unit/test_authentication.py::test_authorize_token_validation_not_registered PASSED [ 32%]
server/tests/unit/test_authentication.py::test_register PASSED           [ 33%]
server/tests/unit/test_authentication.py::test_register_missing_info_email PASSED [ 34%]
server/tests/unit/test_authentication.py::test_register_missing_info_id PASSED [ 34%]
server/tests/unit/test_authentication.py::test_register_error_googleauth PASSED [ 35%]
server/tests/unit/test_authentication.py::test_register_exception PASSED [ 36%]
server/tests/unit/test_authentication.py::test_register_no_user_yet PASSED [ 37%]
server/tests/unit/test_authentication.py::test_register_exception_db PASSED [ 37%]
server/tests/unit/test_google_auth.py::test_validate_token PASSED        [ 38%]
server/tests/unit/test_google_auth.py::test_get_user_information PASSED  [ 39%]
server/tests/unit/test_leaderboard.py::test_get_leaderboard_no_leaders PASSED [ 40%]
server/tests/unit/test_leaderboard.py::test_get_leaderboard PASSED       [ 40%]
server/tests/unit/test_player.py::test_save_commit PASSED                [ 41%]
server/tests/unit/test_player.py::test_save PASSED                       [ 42%]
server/tests/unit/test_player.py::test_find_all_puzzles_for_player PASSED [ 43%]
server/tests/unit/test_player.py::test_find_players_for_puzzle PASSED    [ 43%]
server/tests/unit/test_player.py::test_add_player_to_puzzle_already_too_many_players PASSED [ 44%]
server/tests/unit/test_player.py::test_add_player_to_puzzle_player_doesnt_exist PASSED [ 45%]
server/tests/unit/test_player.py::test_add_player_to_puzzle_ok PASSED    [ 46%]
server/tests/unit/test_player.py::test_to_player_to_str PASSED           [ 46%]
server/tests/unit/test_puzzle_exception.py::test_get_message PASSED      [ 47%]
server/tests/unit/test_puzzle_pieces.py::test_find_all_pieces PASSED     [ 48%]
server/tests/unit/test_puzzle_pieces.py::test_get_piece PASSED           [ 49%]
server/tests/unit/test_puzzle_pieces.py::test_get_piece_none PASSED      [ 50%]
server/tests/unit/test_puzzle_pieces.py::test_save_autocommit PASSED     [ 50%]
server/tests/unit/test_puzzle_pieces.py::test_save PASSED                [ 51%]
server/tests/unit/test_puzzle_pieces.py::test_update_success PASSED      [ 52%]
server/tests/unit/test_puzzle_pieces.py::test_update_fail_static PASSED  [ 53%]
server/tests/unit/test_puzzle_pieces.py::test_get_as_str PASSED          [ 53%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_valid_defaults FAILED [ 54%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_valid_specification FAILED [ 55%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_invalid_difficulty_str PASSED [ 56%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_invalid_difficulty_too_low PASSED [ 56%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_invalid_difficulty_too_high PASSED [ 57%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_invalid_size_str PASSED [ 58%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_invalid_size_too_low PASSED [ 59%]
server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_invalid_size_too_high PASSED [ 59%]
server/tests/unit/test_sudoku_puzzle.py::test_set_point_value1 FAILED    [ 60%]
server/tests/unit/test_sudoku_puzzle.py::test_set_point_value2 FAILED    [ 61%]
server/tests/unit/test_sudoku_puzzle.py::test_get_pieces_as_arr_all ERROR [ 62%]
server/tests/unit/test_sudoku_puzzle.py::test_get_pieces_as_arr_static_only ERROR [ 62%]
server/tests/unit/test_sudoku_puzzle.py::test_recreate_original_puzzle ERROR [ 63%]
server/tests/unit/test_sudoku_puzzle.py::test_check_for_completion_null_values ERROR [ 64%]
server/tests/unit/test_sudoku_puzzle.py::test_check_for_completion_complete ERROR [ 65%]
server/tests/unit/test_sudoku_puzzle.py::test_check_for_completion_incorrect_values ERROR [ 65%]
server/tests/unit/test_sudoku_puzzle.py::test_check_discrepancies_none ERROR [ 66%]
server/tests/unit/test_sudoku_puzzle.py::test_check_discrepancies_many_incorrect ERROR [ 67%]
server/tests/unit/test_sudoku_puzzle.py::test_check_discrepancies_incomplete_puzzle ERROR [ 68%]
server/tests/unit/test_sudoku_puzzle.py::test_get_puzzle_none PASSED     [ 68%]
server/tests/unit/test_sudoku_puzzle.py::test_get_puzzle_found FAILED    [ 69%]
server/tests/unit/test_sudoku_puzzle.py::test_save ERROR                 [ 70%]
server/tests/unit/test_sudoku_puzzle.py::test_save_autocommit ERROR      [ 71%]
server/tests/unit/test_sudoku_puzzle.py::test_attempt_update_complete_puzzle ERROR [ 71%]
server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_coordinate1 ERROR [ 72%]
server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_coordinate2 ERROR [ 73%]
server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_coordinate3 ERROR [ 74%]
server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_coordinate4 ERROR [ 75%]
server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_value1 ERROR [ 75%]
server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_value2 ERROR [ 76%]
server/tests/unit/test_sudoku_puzzle.py::test_update_valid ERROR         [ 77%]
server/tests/unit/test_sudoku_puzzle.py::test_update_valid_complete_puzzle ERROR [ 78%]
server/tests/unit/test_sudoku_puzzle.py::test_set_puzzle_complete ERROR  [ 78%]
server/tests/unit/test_sudoku_puzzle.py::test_as_str ERROR               [ 79%]
server/tests/unit/test_sudoku_resources.py::test_sudoku_to_json FAILED   [ 80%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_none PASSED [ 81%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_all FAILED [ 81%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_create_one_known_exception PASSED [ 82%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_create_one_unknown_exception PASSED [ 83%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_create_one PASSED [ 84%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzle_none_retrieved PASSED [ 84%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzle_none_associated PASSED [ 85%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzle_found FAILED [ 86%]
server/tests/unit/test_sudoku_resources.py::test_join_sudoku_puzzle_already_joined PASSED [ 87%]
server/tests/unit/test_sudoku_resources.py::test_join_sudoku_puzzle PASSED [ 87%]
server/tests/unit/test_sudoku_resources.py::test_join_sudoku_puzzle_known_exception PASSED [ 88%]
server/tests/unit/test_sudoku_resources.py::test_join_sudoku_puzzle_unknown_exception PASSED [ 89%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_add_move_not_associated PASSED [ 90%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_add_move FAILED [ 90%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_add_move_invalid FAILED [ 91%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_add_move_exception PASSED [ 92%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_delete_piece FAILED [ 93%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_delete_piece_invalid FAILED [ 93%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_get_solution_not_associated PASSED [ 94%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_get_solution_not_associated_2 PASSED [ 95%]
server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_get_solution FAILED [ 96%]
server/tests/unit/test_user.py::test_create_user PASSED                  [ 96%]
server/tests/unit/test_user.py::test_user_as_str PASSED                  [ 97%]
server/tests/unit/test_user.py::test_user_print PASSED                   [ 98%]
server/tests/unit/test_user.py::test_user_save PASSED                    [ 99%]
server/tests/unit/test_user.py::test_find_by_g_id PASSED                 [100%]

==================================== ERRORS ====================================
______________ ERROR at setup of test_registration_missing_header ______________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
        integration_tester.save()
        foobar = User('54321', 'foo', 'bar', 'foobar@comsci.com')
        foobar.save()
        princess = User('98734', 'Princess', 'Bride', 'princess@princessbride.com')
        princess.save()
        trump = User('212311', 'Donald', 'Trump', 'drumpy@trump.com')
        trump.save()
        biden = User('987234', 'Joe', 'Biden', 'jb@biden2020.com')
        biden.save()
    
        # save two puzzles, both associated with user foobar (user_id = 2)
>       sudoku = Puzzle(difficulty_level=0.6, size=4)   # puzzle with id = 1

server/tests/integration/test_setup.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345675133088)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'int' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
_____________ ERROR at setup of test_registration_malformed_header _____________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
        integration_tester.save()
        foobar = User('54321', 'foo', 'bar', 'foobar@comsci.com')
        foobar.save()
        princess = User('98734', 'Princess', 'Bride', 'princess@princessbride.com')
        princess.save()
        trump = User('212311', 'Donald', 'Trump', 'drumpy@trump.com')
        trump.save()
        biden = User('987234', 'Joe', 'Biden', 'jb@biden2020.com')
        biden.save()
    
        # save two puzzles, both associated with user foobar (user_id = 2)
>       sudoku = Puzzle(difficulty_level=0.6, size=4)   # puzzle with id = 1

server/tests/integration/test_setup.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345675133088)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'int' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
________ ERROR at setup of test_registration_verification_token_invalid ________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
        integration_tester.save()
        foobar = User('54321', 'foo', 'bar', 'foobar@comsci.com')
        foobar.save()
        princess = User('98734', 'Princess', 'Bride', 'princess@princessbride.com')
        princess.save()
        trump = User('212311', 'Donald', 'Trump', 'drumpy@trump.com')
        trump.save()
        biden = User('987234', 'Joe', 'Biden', 'jb@biden2020.com')
        biden.save()
    
        # save two puzzles, both associated with user foobar (user_id = 2)
>       sudoku = Puzzle(difficulty_level=0.6, size=4)   # puzzle with id = 1

server/tests/integration/test_setup.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345675133088)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'int' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
_____________ ERROR at setup of test_registration_user_info_error ______________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
        integration_tester.save()
        foobar = User('54321', 'foo', 'bar', 'foobar@comsci.com')
        foobar.save()
        princess = User('98734', 'Princess', 'Bride', 'princess@princessbride.com')
        princess.save()
        trump = User('212311', 'Donald', 'Trump', 'drumpy@trump.com')
        trump.save()
        biden = User('987234', 'Joe', 'Biden', 'jb@biden2020.com')
        biden.save()
    
        # save two puzzles, both associated with user foobar (user_id = 2)
>       sudoku = Puzzle(difficulty_level=0.6, size=4)   # puzzle with id = 1

server/tests/integration/test_setup.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345675133088)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'int' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
__________ ERROR at setup of test_register_token_valid_missing_info1 ___________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
        integration_tester.save()
        foobar = User('54321', 'foo', 'bar', 'foobar@comsci.com')
        foobar.save()
        princess = User('98734', 'Princess', 'Bride', 'princess@princessbride.com')
        princess.save()
        trump = User('212311', 'Donald', 'Trump', 'drumpy@trump.com')
        trump.save()
        biden = User('987234', 'Joe', 'Biden', 'jb@biden2020.com')
        biden.save()
    
        # save two puzzles, both associated with user foobar (user_id = 2)
>       sudoku = Puzzle(difficulty_level=0.6, size=4)   # puzzle with id = 1

server/tests/integration/test_setup.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345675133088)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'int' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
__________ ERROR at setup of test_register_token_valid_missing_info2 ___________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
        integration_tester.save()
        foobar = User('54321', 'foo', 'bar', 'foobar@comsci.com')
        foobar.save()
        princess = User('98734', 'Princess', 'Bride', 'princess@princessbride.com')
        princess.save()
        trump = User('212311', 'Donald', 'Trump', 'drumpy@trump.com')
        trump.save()
        biden = User('987234', 'Joe', 'Biden', 'jb@biden2020.com')
        biden.save()
    
        # save two puzzles, both associated with user foobar (user_id = 2)
>       sudoku = Puzzle(difficulty_level=0.6, size=4)   # puzzle with id = 1

server/tests/integration/test_setup.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345675133088)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'int' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
__________ ERROR at setup of test_registration_user_id_already_exists __________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
        integration_tester.save()
        foobar = User('54321', 'foo', 'bar', 'foobar@comsci.com')
        foobar.save()
        princess = User('98734', 'Princess', 'Bride', 'princess@princessbride.com')
        princess.save()
        trump = User('212311', 'Donald', 'Trump', 'drumpy@trump.com')
        trump.save()
        biden = User('987234', 'Joe', 'Biden', 'jb@biden2020.com')
        biden.save()
    
        # save two puzzles, both associated with user foobar (user_id = 2)
>       sudoku = Puzzle(difficulty_level=0.6, size=4)   # puzzle with id = 1

server/tests/integration/test_setup.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345675133088)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'int' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
_____________ ERROR at setup of test_successful_user_registration ______________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
        integration_tester.save()
        foobar = User('54321', 'foo', 'bar', 'foobar@comsci.com')
        foobar.save()
        princess = User('98734', 'Princess', 'Bride', 'princess@princessbride.com')
        princess.save()
        trump = User('212311', 'Donald', 'Trump', 'drumpy@trump.com')
        trump.save()
        biden = User('987234', 'Joe', 'Biden', 'jb@biden2020.com')
        biden.save()
    
        # save two puzzles, both associated with user foobar (user_id = 2)
>       sudoku = Puzzle(difficulty_level=0.6, size=4)   # puzzle with id = 1

server/tests/integration/test_setup.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345675133088)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'int' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
____________ ERROR at setup of test_get_leaders_no_completed_puzzle ____________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c67dcaf0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c67dc8e0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c67dcb50>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635a4f0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c67dcb50>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635a4f0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c67dcb50>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_____________ ERROR at setup of test_get_leaders_completed_puzzles _____________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c67dcaf0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c67dc8e0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c67dcb50>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635a4f0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c67dcb50>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635a4f0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c67dcb50>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_________ ERROR at setup of test_get_leaders_completed_puzzles_limit2 __________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c67dcaf0>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c67dc8e0>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c67dcb50>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635a4f0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c67dcb50>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635a4f0; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c67dcb50>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_______ ERROR at setup of test_attempt_to_use_game_without_registration ________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
______________ ERROR at setup of test_get_all_puzzles_no_puzzles _______________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
________________ ERROR at setup of test_get_nonexistent_puzzle _________________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_________________ ERROR at setup of test_save_new_puzzle_valid _________________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_______ ERROR at setup of test_save_new_puzzle_invalid_difficulty_small ________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_______ ERROR at setup of test_save_new_puzzle_invalid_difficulty_large ________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
__________ ERROR at setup of test_save_new_puzzle_invalid_size_large ___________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
__________ ERROR at setup of test_save_new_puzzle_invalid_size_small ___________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_______________ ERROR at setup of test_get_all_puzzles_for_user ________________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
___________________ ERROR at setup of test_get_puzzle_valid ____________________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
__________ ERROR at setup of test_attempt_to_get_unaffiliated_puzzle ___________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
___ ERROR at setup of test_attempt_to_add_player_to_puzzle_already_in_puzzle ___

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
___ ERROR at setup of test_attempt_to_add_player_to_puzzle_that_doesnt_exist ___

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_________ ERROR at setup of test_attempt_to_add_player_to_puzzle_valid _________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
______ ERROR at setup of test_attempt_to_join_puzzle_max_players_reached _______

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_________ ERROR at setup of test_attempt_add_piece_valid_no_value_yet __________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
________ ERROR at setup of test_attempt_add_piece_valid_override_value _________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
____ ERROR at setup of test_attempt_add_piece_player_is_not_affiliated_with ____

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
__________ ERROR at setup of test_attempt_add_piece_invalid_piece_low __________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_________ ERROR at setup of test_attempt_add_piece_invalid_piece_high __________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
________ ERROR at setup of test_attempt_add_piece_invalid_position_high ________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
________ ERROR at setup of test_attempt_add_piece_invalid_position_low _________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_________________ ERROR at setup of test_attempt_remove_piece __________________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
______________ ERROR at setup of test_attempt_remove_static_piece ______________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
____________ ERROR at setup of test_get_puzzle_solution_incomplete _____________

self = <sqlalchemy.engine.base.Connection object at 0x7fa4c6e4f190>
dialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
args = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x7fa4c62a24f0>, [{'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}])
conn = <sqlalchemy.pool.base._ConnectionFairy object at 0x7fa4c6e4f040>
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`_engine.ResultProxy`.
    
        """
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            if not self.engine.hide_parameters:
                self.engine.logger.info(
                    "%r",
                    sql_util._repr_params(
                        parameters, batches=10, ismulti=context.executemany
                    ),
                )
            else:
                self.engine.logger.info(
                    "[SQL parameters hidden due to hide_parameters=True]"
                )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, statement, parameters, context
                    )

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       psycopg2.errors.UniqueViolation: duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: UniqueViolation

The above exception was the direct cause of the following exception:

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
        """
        Create the test database tables before tests run, yield
        the database for tests, and drop tables upon completion.
        """
        # setup -- create the database tables
        db.create_all()
        db.session.commit()
    
        # --- create a bunch of test users ----
        integration_tester = User('12345', 'integration', 'tester', 'tester@tests.com')
>       integration_tester.save()

server/tests/integration/test_setup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/user.py:42: in save
    db.session.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/scoping.py:163: in do
    return getattr(self.registry(), name)(*args, **kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:1042: in commit
    self.transaction.commit()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:504: in commit
    self._prepare_impl()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:483: in _prepare_impl
    self.session.flush()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2536: in flush
    self._flush(objects)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2678: in _flush
    transaction.rollback(_capture_exception=True)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/session.py:2638: in _flush
    flush_context.execute()
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:422: in execute
    rec.execute(self)
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/unitofwork.py:586: in execute
    persistence.save_obj(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:239: in save_obj
    _emit_insert_statements(
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/persistence.py:1135: in _emit_insert_statements
    result = cached_connections[connection].execute(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1011: in execute
    return meth(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/sql/elements.py:298: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1124: in _execute_clauseelement
    ret = self._execute_context(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1316: in _execute_context
    self._handle_dbapi_exception(
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1510: in _handle_dbapi_exception
    util.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/engine/base.py:1276: in _execute_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x7fa4c6340070>
cursor = <cursor object at 0x7fa4c635ab80; closed: -1>
statement = 'INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id'
parameters = {'email': 'tester@tests.com', 'first_name': 'integration', 'g_id': '12345', 'last_name': 'tester'}
context = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x7fa4c6e4f2b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (psycopg2.errors.UniqueViolation) duplicate key value violates unique constraint "users_g_id_key"
E       DETAIL:  Key (g_id)=(12345) already exists.
E       
E       [SQL: INSERT INTO users (g_id, first_name, last_name, email) VALUES (%(g_id)s, %(first_name)s, %(last_name)s, %(email)s) RETURNING users.id]
E       [parameters: {'g_id': '12345', 'first_name': 'integration', 'last_name': 'tester', 'email': 'tester@tests.com'}]
E       (Background on this error at: http://sqlalche.me/e/13/gkpj)

server/venv/lib/python3.8/site-packages/sqlalchemy/engine/default.py:593: IntegrityError
_________________ ERROR at setup of test_get_pieces_as_arr_all _________________

    @pytest.fixture(autouse=False)
    def incomplete_puzzle():
        """
        Have an incomplete puzzle that can be used for testing
        """
>       puzzle = Puzzle(difficulty_level=0.2, size=2)

server/tests/unit/test_sudoku_puzzle.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345679490928)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
_____________ ERROR at setup of test_get_pieces_as_arr_static_only _____________

    @pytest.fixture(autouse=False)
    def incomplete_puzzle():
        """
        Have an incomplete puzzle that can be used for testing
        """
>       puzzle = Puzzle(difficulty_level=0.2, size=2)

server/tests/unit/test_sudoku_puzzle.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345688864512)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
_______________ ERROR at setup of test_recreate_original_puzzle ________________

    @pytest.fixture(autouse=False)
    def incomplete_puzzle():
        """
        Have an incomplete puzzle that can be used for testing
        """
>       puzzle = Puzzle(difficulty_level=0.2, size=2)

server/tests/unit/test_sudoku_puzzle.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345679641712)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
___________ ERROR at setup of test_check_for_completion_null_values ____________

    @pytest.fixture(autouse=False)
    def incomplete_puzzle():
        """
        Have an incomplete puzzle that can be used for testing
        """
>       puzzle = Puzzle(difficulty_level=0.2, size=2)

server/tests/unit/test_sudoku_puzzle.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345679783584)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
_____________ ERROR at setup of test_check_for_completion_complete _____________

    @pytest.fixture(autouse=False)
    def complete_puzzle():
>       puzzle = Puzzle(difficulty_level=0.2, size=2)

server/tests/unit/test_sudoku_puzzle.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345686902240)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
_________ ERROR at setup of test_check_for_completion_incorrect_values _________

    @pytest.fixture(autouse=False)
    def incorrect_puzzle():
>       puzzle = Puzzle(difficulty_level=0.2, size=2)

server/tests/unit/test_sudoku_puzzle.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345680760448)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
_______________ ERROR at setup of test_check_discrepancies_none ________________

    @pytest.fixture(autouse=False)
    def complete_puzzle():
>       puzzle = Puzzle(difficulty_level=0.2, size=2)

server/tests/unit/test_sudoku_puzzle.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345689586608)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
__________ ERROR at setup of test_check_discrepancies_many_incorrect ___________

    @pytest.fixture(autouse=False)
    def incorrect_puzzle():
>       puzzle = Puzzle(difficulty_level=0.2, size=2)

server/tests/unit/test_sudoku_puzzle.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345681333504)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
_________ ERROR at setup of test_check_discrepancies_incomplete_puzzle _________

    @pytest.fixture(autouse=False)
    def incomplete_puzzle():
        """
        Have an incomplete puzzle that can be used for testing
        """
>       puzzle = Puzzle(difficulty_level=0.2, size=2)

server/tests/unit/test_sudoku_puzzle.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345681202384)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
_________________________ ERROR at setup of test_save __________________________

    @pytest.fixture(autouse=False)
    def complete_puzzle():
>       puzzle = Puzzle(difficulty_level=0.2, size=2)

server/tests/unit/test_sudoku_puzzle.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345649235520)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
____________________ ERROR at setup of test_save_autocommit ____________________

    @pytest.fixture(autouse=False)
    def complete_puzzle():
>       puzzle = Puzzle(difficulty_level=0.2, size=2)

server/tests/unit/test_sudoku_puzzle.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345681106208)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
____________ ERROR at setup of test_attempt_update_complete_puzzle _____________

    @pytest.fixture(autouse=False)
    def complete_puzzle():
>       puzzle = Puzzle(difficulty_level=0.2, size=2)

server/tests/unit/test_sudoku_puzzle.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345682148464)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
______________ ERROR at setup of test_update_invalid_coordinate1 _______________

    @pytest.fixture(autouse=False)
    def incomplete_puzzle():
        """
        Have an incomplete puzzle that can be used for testing
        """
>       puzzle = Puzzle(difficulty_level=0.2, size=2)

server/tests/unit/test_sudoku_puzzle.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345682141344)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
______________ ERROR at setup of test_update_invalid_coordinate2 _______________

    @pytest.fixture(autouse=False)
    def incomplete_puzzle():
        """
        Have an incomplete puzzle that can be used for testing
        """
>       puzzle = Puzzle(difficulty_level=0.2, size=2)

server/tests/unit/test_sudoku_puzzle.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345682581248)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
______________ ERROR at setup of test_update_invalid_coordinate3 _______________

    @pytest.fixture(autouse=False)
    def incomplete_puzzle():
        """
        Have an incomplete puzzle that can be used for testing
        """
>       puzzle = Puzzle(difficulty_level=0.2, size=2)

server/tests/unit/test_sudoku_puzzle.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345681657808)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
______________ ERROR at setup of test_update_invalid_coordinate4 _______________

    @pytest.fixture(autouse=False)
    def incomplete_puzzle():
        """
        Have an incomplete puzzle that can be used for testing
        """
>       puzzle = Puzzle(difficulty_level=0.2, size=2)

server/tests/unit/test_sudoku_puzzle.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345689203808)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
_________________ ERROR at setup of test_update_invalid_value1 _________________

    @pytest.fixture(autouse=False)
    def incomplete_puzzle():
        """
        Have an incomplete puzzle that can be used for testing
        """
>       puzzle = Puzzle(difficulty_level=0.2, size=2)

server/tests/unit/test_sudoku_puzzle.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345678927472)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
_________________ ERROR at setup of test_update_invalid_value2 _________________

    @pytest.fixture(autouse=False)
    def incomplete_puzzle():
        """
        Have an incomplete puzzle that can be used for testing
        """
>       puzzle = Puzzle(difficulty_level=0.2, size=2)

server/tests/unit/test_sudoku_puzzle.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345649237392)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
_____________________ ERROR at setup of test_update_valid ______________________

    @pytest.fixture(autouse=False)
    def incomplete_puzzle():
        """
        Have an incomplete puzzle that can be used for testing
        """
>       puzzle = Puzzle(difficulty_level=0.2, size=2)

server/tests/unit/test_sudoku_puzzle.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345682000528)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
_____________ ERROR at setup of test_update_valid_complete_puzzle ______________

    @pytest.fixture(autouse=False)
    def incomplete_puzzle():
        """
        Have an incomplete puzzle that can be used for testing
        """
>       puzzle = Puzzle(difficulty_level=0.2, size=2)

server/tests/unit/test_sudoku_puzzle.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345683399920)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
__________________ ERROR at setup of test_set_puzzle_complete __________________

    @pytest.fixture(autouse=False)
    def incomplete_puzzle():
        """
        Have an incomplete puzzle that can be used for testing
        """
>       puzzle = Puzzle(difficulty_level=0.2, size=2)

server/tests/unit/test_sudoku_puzzle.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345690841632)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
________________________ ERROR at setup of test_as_str _________________________

    @pytest.fixture(autouse=False)
    def incomplete_puzzle():
        """
        Have an incomplete puzzle that can be used for testing
        """
>       puzzle = Puzzle(difficulty_level=0.2, size=2)

server/tests/unit/test_sudoku_puzzle.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345682049296)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
=================================== FAILURES ===================================
___________________ test_create_sudoku_puzzle_valid_defaults ___________________

    def test_create_sudoku_puzzle_valid_defaults():
        """
        Make sure that it is possible to create a sudoku puzzle using defaults.
        """
>       sudoku = Puzzle()

server/tests/unit/test_sudoku_puzzle.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345688257392)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'int' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
________________ test_create_sudoku_puzzle_valid_specification _________________

    def test_create_sudoku_puzzle_valid_specification():
        """
        Make sure that it is possible to create a sudoku puzzle by specifying difficulty and size.
        """
>       sudoku = Puzzle(difficulty_level=0.6, size=4)

server/tests/unit/test_sudoku_puzzle.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345683825616)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'int' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
____________________________ test_set_point_value1 _____________________________

    def test_set_point_value1():
        """
        Make sure that point values are calculated correctly based on difficulty and size.
        """
>       sudoku = Puzzle(difficulty_level=0.6, size=4)

server/tests/unit/test_sudoku_puzzle.py:196: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345685320176)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'int' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
____________________________ test_set_point_value2 _____________________________

    def test_set_point_value2():
        """
        Make sure that point values are calculated correctly based on difficulty and size.
        """
>       sudoku = Puzzle(difficulty_level=0.2, size=3)

server/tests/unit/test_sudoku_puzzle.py:204: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345681649088)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'int' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
____________________________ test_get_puzzle_found _____________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fa4c6622340>
pieces = [<PuzzlePiece (transient 140345679683984)>, <PuzzlePiece (transient 140345679684752)>, <PuzzlePiece (transient 1403456...transient 140345679685952)>, <PuzzlePiece (transient 140345679686000)>, <PuzzlePiece (transient 140345679684080)>, ...]

    def test_get_puzzle_found(monkeypatch, pieces):
        """
        If the puzzle exists, it should be successfully returned by the get_puzzle() function.
        """
        class MockBaseQuery:
    
            def __init__(self, *args, **kwargs):
                pass
    
            def filter_by(self, *args, **kwargs):
                class Results():
                    def first(self):
                        return Puzzle(difficulty_level=0.2, size=2)
    
                return Results()
    
            def join(self, *args, **kwargs):
                return
    
        def mock_find_pieces(*args, **kwargs):
            return pieces
    
        monkeypatch.setattr('flask_sqlalchemy._QueryProperty.__get__', MockBaseQuery)
        monkeypatch.setattr(PuzzlePiece, "find_all_pieces", mock_find_pieces)
    
>       result = Puzzle.get_puzzle(1)

server/tests/unit/test_sudoku_puzzle.py:336: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/models/sudoku_puzzle.py:62: in get_puzzle
    puzzle = cls.query.filter_by(id=puzzle_id).first()  # returns None if no results matched
server/tests/unit/test_sudoku_puzzle.py:323: in first
    return Puzzle(difficulty_level=0.2, size=2)
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345679684320)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'NoneType' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
_____________________________ test_sudoku_to_json ______________________________

    def test_sudoku_to_json():
        """
        Conversion of sudoku puzzle to json should be successful.
        """
        foobar = User('54321', 'foo', 'bar', 'foobar@comsci.com')
        foobar.id = 1
    
        princess = User('98734', 'Princess', 'Bride', 'princess@princessbride.com')
        princess.id = 2
    
>       sudoku = Puzzle(difficulty_level=0.6, size=4)

server/tests/unit/test_sudoku_resources.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345678798560)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'int' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
_________________________ test_get_sudoku_puzzles_all __________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fa4c6940520>
user = <User (transient 140345682954416)>, mock_get_puzzle = None

    def test_get_sudoku_puzzles_all(monkeypatch, user, mock_get_puzzle):
        """
        If there are puzzles associated with the player, an attempt to get all puzzles should
        return all associated puzzles.
        """
    
        def mock_get_puzzles_for_player(*args, **kwargs):
            return [PuzzlePlayer(player_id=5, puzzle_id=3)]
    
        def mock_get_players(*args, **kwargs):
            return [
                User(first_name='Sally', last_name='Sue', email='sallysue@emails.com', g_id='123445')
            ]
    
        monkeypatch.setattr(PuzzlePlayer, 'find_all_puzzles_for_player', mock_get_puzzles_for_player)
        monkeypatch.setattr(PuzzlePlayer, 'find_players_for_puzzle', mock_get_players)
    
        with app.app_context():
            g.user = user
            puzzles_resource = SudokuPuzzles()
>           result = puzzles_resource.get()

server/tests/unit/test_sudoku_resources.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/resources/sudoku.py:48: in get
    'puzzles': [
server/resources/sudoku.py:50: in <listcomp>
    puzzle=Puzzle.get_puzzle(puzzle.puzzle_id),
server/tests/unit/test_sudoku_resources.py:58: in mock_get_puzzle
    puzzle = Puzzle(difficulty_level=0.5, completed=False, size=3)
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345682956192)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'int' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
_________________________ test_get_sudoku_puzzle_found _________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fa4c661f7c0>
mock_get_puzzle = None, mock_single_puzzles_for_player = None
user = <User (transient 140345679674912)>

    def test_get_sudoku_puzzle_found(monkeypatch, mock_get_puzzle, mock_single_puzzles_for_player,
                                     user):
        """
        If an attempt is made to a get a puzzle that is associated with a user, the response should
        successfully return that puzzle.
        """
    
        def mock_get_players(*args, **kwargs):
            user = User(first_name='Sally', last_name='Sue', email='sallysue@emails.com', g_id='123445')
            user.id = 1
            return [user]
    
        monkeypatch.setattr(PuzzlePlayer, 'find_players_for_puzzle', mock_get_players)
    
        with app.app_context():
            puzzles_resource = SudokuPuzzle()
            g.user = user
>           result = puzzles_resource.get(1)

server/tests/unit/test_sudoku_resources.py:346: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/resources/sudoku.py:112: in get
    puzzle=Puzzle.get_puzzle(puzzle_id),
server/tests/unit/test_sudoku_resources.py:58: in mock_get_puzzle
    puzzle = Puzzle(difficulty_level=0.5, completed=False, size=3)
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345679674288)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'int' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
_______________________ test_get_sudoku_puzzles_add_move _______________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fa4c71890a0>
user = <User (transient 140345691642992)>, mock_single_puzzles_for_player = None
mock_get_puzzle = None

    def test_get_sudoku_puzzles_add_move(monkeypatch, user, mock_single_puzzles_for_player,
                                         mock_get_puzzle):
        """
        If a player attempts to make a move on a puzzle that they are associated with,
        the attempt should be successful.
        """
        class MockParser:
            """
            Mock the parsing function of the endpoint.
            """
            def add_argument(self, *args, **kwargs):
                """
                Mock add argument, do nothing.
                """
                return
    
            def parse_args(self):
                """
                Mock the parsing function by returning known dict
                """
                return {
                    'x_coordinate': 0,
                    'y_coordinate': 1,
                    'value': 1
                }
    
        monkeypatch.setattr(db, "session", MockSession)
    
        with app.app_context():
            g.user = user
            puzzle_piece_resource = SudokuPuzzlePiece()
            puzzle_piece_resource.parser = MockParser()
            result = puzzle_piece_resource.post(1)
    
        expected = {'message': 'Successfully saved the submission of 1 at '
                               '(0, 1) on puzzle_id 1 by Jane Doe (id = 1)'}
>       assert result == expected
E       AssertionError: assert ({'message': ...puzzle'}, 500) == {'message': '...Doe (id = 1)'}
E         +({'message': 'Unexpected error occurred while adding new value to puzzle'}, 500)
E         -{'message': 'Successfully saved the submission of 1 at (0, 1) on puzzle_id 1 by Jane Doe (id = 1)'}
E         Full diff:
E         - {
E         -  'message': 'Successfully saved the submission of 1 at (0, 1) on puzzle_id 1 '
E         -             'by Jane Doe (id = 1)',
E         - }...
E         
E         ...Full output truncated (5 lines hidden), use '-vv' to show

server/tests/unit/test_sudoku_resources.py:504: AssertionError
----------------------------- Captured stdout call -----------------------------
Unexpected error: 'int' object is not subscriptable
___________________ test_get_sudoku_puzzles_add_move_invalid ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fa4c6b82100>
user = <User (transient 140345685323584)>, mock_single_puzzles_for_player = None
mock_get_puzzle = None

    def test_get_sudoku_puzzles_add_move_invalid(monkeypatch, user, mock_single_puzzles_for_player,
                                                 mock_get_puzzle):
        """
        If a player attempts to make an invalid move on a puzzle that they are
        associated with, the request should not be successful.
        """
        class MockParser:
            """
            Mock the parsing function of the endpoint.
            """
            def add_argument(self, *args, **kwargs):
                """
                Mock add argument, do nothing.
                """
                pass
    
            def parse_args(self):
                """
                Mock the parsing function by returning known dict
                """
                return {
                    'x_coordinate': 0,
                    'y_coordinate': 100,
                    'value': 1
                }
    
        monkeypatch.setattr(db, "session", MockSession)
    
        with app.app_context():
            g.user = user
            puzzle_piece_resource = SudokuPuzzlePiece()
            puzzle_piece_resource.parser = MockParser()
            result = puzzle_piece_resource.post(1)
    
        expected = ({'message': 'Attempt to save 1 at (0, 100) on '
                                'puzzle_id 1 by user Jane Doe (id = 1) was unsuccessful',
                     'reason': 'Coordinates provided (0, 100) are outside the range of the puzzle. '
                               'Available coordinates are (0, 0) to (9, 9).'}, 400)
>       assert result == expected
E       AssertionError: assert ({'message': ...puzzle'}, 500) == ({'message': ...9, 9).'}, 400)
E         At index 0 diff: {'message': 'Unexpected error occurred while adding new value to puzzle'} != {'message': 'Attempt to save 1 at (0, 100) on puzzle_id 1 by user Jane Doe (id = 1) was unsuccessful', 'reason': 'Coordinates provided (0, 100) are outside the range of the puzzle. Available coordinates are (0, 0) to (9, 9).'}
E         Full diff:
E           (
E         +  {'message': 'Unexpected error occurred while adding new value to puzzle'},
E         -  {'message': 'Attempt to save 1 at (0, 100) on puzzle_id 1 by user Jane Doe '
E         -              '(id = 1) was unsuccessful',
E         -   'reason': 'Coordinates provided (0, 100)...
E         
E         ...Full output truncated (7 lines hidden), use '-vv' to show

server/tests/unit/test_sudoku_resources.py:545: AssertionError
----------------------------- Captured stdout call -----------------------------
Unexpected error: 'int' object is not subscriptable
_____________________ test_get_sudoku_puzzles_delete_piece _____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fa4c6d044c0>
user = <User (transient 140345686903872)>, mock_single_puzzles_for_player = None
mock_get_puzzle = None

    def test_get_sudoku_puzzles_delete_piece(monkeypatch, user, mock_single_puzzles_for_player,
                                             mock_get_puzzle):
        """
        If a player attempts to make a move on a puzzle that they are associated
        with, the attempt should be successful.
        """
        class MockParser:
            """
            Mock the parsing function of the endpoint.
            """
            def add_argument(self, *args, **kwargs):
                """
                Mock add argument, do nothing.
                """
                return
    
            def parse_args(self):
                """
                Mock the parsing function by returning known dict
                """
                return {
                    'x_coordinate': 0,
                    'y_coordinate': 1
                }
    
        monkeypatch.setattr(db, "session", MockSession)
    
        with app.app_context():
            g.user = user
            puzzle_piece_resource = SudokuPuzzlePiece()
            puzzle_piece_resource.parser = MockParser()
            result = puzzle_piece_resource.delete(1)
    
        expected = {'message': 'Successfully deleted piece at position (0, 1) on puzzle_id 1.'}
>       assert result == expected
E       AssertionError: assert ({'message': ...puzzle'}, 500) == {'message': '...puzzle_id 1.'}
E         +({'message': 'Unexpected error occurred while deleting value from puzzle'}, 500)
E         -{'message': 'Successfully deleted piece at position (0, 1) on puzzle_id 1.'}
E         Full diff:
E         - {'message': 'Successfully deleted piece at position (0, 1) on puzzle_id 1.'}
E         + ({'message': 'Unexpected error occurred while deleting value from puzzle'}, 500)

server/tests/unit/test_sudoku_resources.py:625: AssertionError
----------------------------- Captured stdout call -----------------------------
Unexpected error: 'int' object is not subscriptable
_________________ test_get_sudoku_puzzles_delete_piece_invalid _________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fa4c68068b0>
user = <User (transient 140345681667648)>, mock_single_puzzles_for_player = None
mock_get_puzzle = None

    def test_get_sudoku_puzzles_delete_piece_invalid(monkeypatch, user, mock_single_puzzles_for_player,
                                                     mock_get_puzzle):
        """
        If a player attempts to make a move on a puzzle that they are associated with,
        the attempt should be successful.
        """
        class MockParser:
            """
            Mock the parsing function of the endpoint.
            """
            def add_argument(self, *args, **kwargs):
                """
                Mock add argument, do nothing.
                """
                return
    
            def parse_args(self):
                """
                Mock the parsing function by returning known dict
                """
                return {
                    'x_coordinate': 1,
                    'y_coordinate': 1
                }
    
        monkeypatch.setattr(db, "session", MockSession)
    
        with app.app_context():
            g.user = user
            puzzle_piece_resource = SudokuPuzzlePiece()
            puzzle_piece_resource.parser = MockParser()
            result = puzzle_piece_resource.delete(1)
    
        expected = ({'message': 'Attempt to delete piece at (1, 1) on puzzle_id 1 by user Jane Doe '
                                '(id = 1) was unsuccessful',
                     'reason': 'Changes can only be made to non-static puzzle pieces.'}, 400)
>       assert result == expected
E       AssertionError: assert ({'message': ...puzzle'}, 500) == ({'message': ...ieces.'}, 400)
E         At index 0 diff: {'message': 'Unexpected error occurred while deleting value from puzzle'} != {'message': 'Attempt to delete piece at (1, 1) on puzzle_id 1 by user Jane Doe (id = 1) was unsuccessful', 'reason': 'Changes can only be made to non-static puzzle pieces.'}
E         Full diff:
E           (
E         +  {'message': 'Unexpected error occurred while deleting value from puzzle'},
E         -  {'message': 'Attempt to delete piece at (1, 1) on puzzle_id 1 by user Jane '
E         -              'Doe (id = 1) was unsuccessful',
E         -   'reason': 'Changes can only be made to non-static puzzle pieces.'},...
E         
E         ...Full output truncated (6 lines hidden), use '-vv' to show

server/tests/unit/test_sudoku_resources.py:664: AssertionError
----------------------------- Captured stdout call -----------------------------
Unexpected error: 'int' object is not subscriptable
_____________________ test_get_sudoku_puzzles_get_solution _____________________

user = <User (transient 140345686436208)>, mock_single_puzzles_for_player = None
mock_get_puzzle = None

    def test_get_sudoku_puzzles_get_solution(user, mock_single_puzzles_for_player, mock_get_puzzle):
        """
        If a player attempts to get the solution for a puzzle that they are
        associated with, the request should succeed.
        """
        with app.app_context():
            g.user = user
            puzzle_solution_resource = SudokuPuzzleSolution()
>           result = puzzle_solution_resource.get(1)

server/tests/unit/test_sudoku_resources.py:709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/resources/sudoku.py:276: in get
    puzzle = Puzzle.get_puzzle(puzzle_id)
server/tests/unit/test_sudoku_resources.py:58: in mock_get_puzzle
    puzzle = Puzzle(difficulty_level=0.5, completed=False, size=3)
<string>:4: in __init__
    ???
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:433: in _initialize_instance
    manager.dispatch.init_failure(self, args, kwargs)
server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:68: in __exit__
    compat.raise_(
server/venv/lib/python3.8/site-packages/sqlalchemy/util/compat.py:182: in raise_
    raise exception
server/venv/lib/python3.8/site-packages/sqlalchemy/orm/state.py:430: in _initialize_instance
    return manager.original_init(*mixed[1:], **kwargs)
server/models/sudoku_puzzle.py:55: in __init__
    self.set_pieces()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Puzzle (transient 140345686437504)>

    def set_pieces(self):
        """
        Set the puzzle pieces for the Sudoku board.
        """
        pieces = Sudoku(self.size).difficulty(self.difficulty).board  # produces 2D array of values
        for i, pi in enumerate(pieces):
            for j, piece in enumerate(pi):
>               static_piece = bool(piece[i][j])
E               TypeError: 'int' object is not subscriptable

server/models/sudoku_puzzle.py:128: TypeError
=============================== warnings summary ===============================
server/tests/integration/test_authentication.py::test_registration_missing_header
  /Users/meganfrenkel/Workspace/KERMit/server/venv/lib/python3.8/site-packages/sqlalchemy/util/langhelpers.py:254: SADeprecationWarning: The 'postgres' dialect name has been renamed to 'postgresql'
    loader = self.auto_fn(name)

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ============================
FAILED server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_valid_defaults
FAILED server/tests/unit/test_sudoku_puzzle.py::test_create_sudoku_puzzle_valid_specification
FAILED server/tests/unit/test_sudoku_puzzle.py::test_set_point_value1 - TypeE...
FAILED server/tests/unit/test_sudoku_puzzle.py::test_set_point_value2 - TypeE...
FAILED server/tests/unit/test_sudoku_puzzle.py::test_get_puzzle_found - TypeE...
FAILED server/tests/unit/test_sudoku_resources.py::test_sudoku_to_json - Type...
FAILED server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_all
FAILED server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzle_found
FAILED server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_add_move
FAILED server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_add_move_invalid
FAILED server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_delete_piece
FAILED server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_delete_piece_invalid
FAILED server/tests/unit/test_sudoku_resources.py::test_get_sudoku_puzzles_get_solution
ERROR server/tests/integration/test_authentication.py::test_registration_missing_header
ERROR server/tests/integration/test_authentication.py::test_registration_malformed_header
ERROR server/tests/integration/test_authentication.py::test_registration_verification_token_invalid
ERROR server/tests/integration/test_authentication.py::test_registration_user_info_error
ERROR server/tests/integration/test_authentication.py::test_register_token_valid_missing_info1
ERROR server/tests/integration/test_authentication.py::test_register_token_valid_missing_info2
ERROR server/tests/integration/test_authentication.py::test_registration_user_id_already_exists
ERROR server/tests/integration/test_authentication.py::test_successful_user_registration
ERROR server/tests/integration/test_leaderboard.py::test_get_leaders_no_completed_puzzle
ERROR server/tests/integration/test_leaderboard.py::test_get_leaders_completed_puzzles
ERROR server/tests/integration/test_leaderboard.py::test_get_leaders_completed_puzzles_limit2
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_use_game_without_registration
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_no_puzzles
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_nonexistent_puzzle
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_valid
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_small
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_large
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_large
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_small
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_for_user
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_valid
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_get_unaffiliated_puzzle
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_already_in_puzzle
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_that_doesnt_exist
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_valid
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_join_puzzle_max_players_reached
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_no_value_yet
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_override_value
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_player_is_not_affiliated_with
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_low
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_high
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_high
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_low
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_remove_piece
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_remove_static_piece
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_solution_incomplete
ERROR server/tests/unit/test_sudoku_puzzle.py::test_get_pieces_as_arr_all - T...
ERROR server/tests/unit/test_sudoku_puzzle.py::test_get_pieces_as_arr_static_only
ERROR server/tests/unit/test_sudoku_puzzle.py::test_recreate_original_puzzle
ERROR server/tests/unit/test_sudoku_puzzle.py::test_check_for_completion_null_values
ERROR server/tests/unit/test_sudoku_puzzle.py::test_check_for_completion_complete
ERROR server/tests/unit/test_sudoku_puzzle.py::test_check_for_completion_incorrect_values
ERROR server/tests/unit/test_sudoku_puzzle.py::test_check_discrepancies_none
ERROR server/tests/unit/test_sudoku_puzzle.py::test_check_discrepancies_many_incorrect
ERROR server/tests/unit/test_sudoku_puzzle.py::test_check_discrepancies_incomplete_puzzle
ERROR server/tests/unit/test_sudoku_puzzle.py::test_save - TypeError: 'NoneTy...
ERROR server/tests/unit/test_sudoku_puzzle.py::test_save_autocommit - TypeErr...
ERROR server/tests/unit/test_sudoku_puzzle.py::test_attempt_update_complete_puzzle
ERROR server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_coordinate1
ERROR server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_coordinate2
ERROR server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_coordinate3
ERROR server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_coordinate4
ERROR server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_value1 - T...
ERROR server/tests/unit/test_sudoku_puzzle.py::test_update_invalid_value2 - T...
ERROR server/tests/unit/test_sudoku_puzzle.py::test_update_valid - TypeError:...
ERROR server/tests/unit/test_sudoku_puzzle.py::test_update_valid_complete_puzzle
ERROR server/tests/unit/test_sudoku_puzzle.py::test_set_puzzle_complete - Typ...
ERROR server/tests/unit/test_sudoku_puzzle.py::test_as_str - TypeError: 'None...
============= 13 failed, 61 passed, 1 warning, 58 errors in 14.62s =============
