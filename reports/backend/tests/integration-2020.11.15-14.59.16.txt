============================= test session starts ==============================
platform darwin -- Python 3.8.3, pytest-6.1.2, py-1.9.0, pluggy-0.13.1 -- /Users/meganfrenkel/Workspace/KERMit/server/venv/bin/python
cachedir: .pytest_cache
rootdir: /Users/meganfrenkel/Workspace/KERMit
plugins: mock-3.3.1
collecting ... collected 31 items

server/tests/integration/test_authentication.py::test_registration_missing_header ERROR [  3%]
server/tests/integration/test_authentication.py::test_registration_malformed_header ERROR [  6%]
server/tests/integration/test_authentication.py::test_registration_verification_token_invalid ERROR [  9%]
server/tests/integration/test_authentication.py::test_registration_user_info_error ERROR [ 12%]
server/tests/integration/test_authentication.py::test_registration_token_valid_missing_info1 ERROR [ 16%]
server/tests/integration/test_authentication.py::test_registration_token_valid_missing_info2 ERROR [ 19%]
server/tests/integration/test_authentication.py::test_registration_user_id_already_exists ERROR [ 22%]
server/tests/integration/test_authentication.py::test_successful_user_registration ERROR [ 25%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_use_game_without_registration ERROR [ 29%]
server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_no_puzzles ERROR [ 32%]
server/tests/integration/test_sudoku_endpoints.py::test_get_nonexistent_puzzle ERROR [ 35%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_valid ERROR [ 38%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_small ERROR [ 41%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_large ERROR [ 45%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_large ERROR [ 48%]
server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_small ERROR [ 51%]
server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_for_user ERROR [ 54%]
server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_valid ERROR [ 58%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_get_unaffiliated_puzzle ERROR [ 61%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_already_in_puzzle ERROR [ 64%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_that_doesnt_exist ERROR [ 67%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_valid ERROR [ 70%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_join_puzzle_max_players_reached ERROR [ 74%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_no_value_yet ERROR [ 77%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_override_value ERROR [ 80%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_puzzle_player_is_not_affiliated_with ERROR [ 83%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_low ERROR [ 87%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_high ERROR [ 90%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_high ERROR [ 93%]
server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_low ERROR [ 96%]
server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_solution_incomplete ERROR [100%]

==================================== ERRORS ====================================
______________ ERROR at setup of test_registration_missing_header ______________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_____________ ERROR at setup of test_registration_malformed_header _____________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
________ ERROR at setup of test_registration_verification_token_invalid ________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_____________ ERROR at setup of test_registration_user_info_error ______________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
________ ERROR at setup of test_registration_token_valid_missing_info1 _________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
________ ERROR at setup of test_registration_token_valid_missing_info2 _________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
__________ ERROR at setup of test_registration_user_id_already_exists __________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_____________ ERROR at setup of test_successful_user_registration ______________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_______ ERROR at setup of test_attempt_to_use_game_without_registration ________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
______________ ERROR at setup of test_get_all_puzzles_no_puzzles _______________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
________________ ERROR at setup of test_get_nonexistent_puzzle _________________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_________________ ERROR at setup of test_save_new_puzzle_valid _________________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_______ ERROR at setup of test_save_new_puzzle_invalid_difficulty_small ________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_______ ERROR at setup of test_save_new_puzzle_invalid_difficulty_large ________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
__________ ERROR at setup of test_save_new_puzzle_invalid_size_large ___________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
__________ ERROR at setup of test_save_new_puzzle_invalid_size_small ___________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_______________ ERROR at setup of test_get_all_puzzles_for_user ________________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
___________________ ERROR at setup of test_get_puzzle_valid ____________________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
__________ ERROR at setup of test_attempt_to_get_unaffiliated_puzzle ___________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
___ ERROR at setup of test_attempt_to_add_player_to_puzzle_already_in_puzzle ___

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
___ ERROR at setup of test_attempt_to_add_player_to_puzzle_that_doesnt_exist ___

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_________ ERROR at setup of test_attempt_to_add_player_to_puzzle_valid _________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
______ ERROR at setup of test_attempt_to_join_puzzle_max_players_reached _______

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_________ ERROR at setup of test_attempt_add_piece_valid_no_value_yet __________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
________ ERROR at setup of test_attempt_add_piece_valid_override_value _________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_ ERROR at setup of test_attempt_add_piece_puzzle_player_is_not_affiliated_with _

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
__________ ERROR at setup of test_attempt_add_piece_invalid_piece_low __________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
_________ ERROR at setup of test_attempt_add_piece_invalid_piece_high __________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
________ ERROR at setup of test_attempt_add_piece_invalid_position_high ________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
________ ERROR at setup of test_attempt_add_piece_invalid_position_low _________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
____________ ERROR at setup of test_get_puzzle_solution_incomplete _____________

test_client = <FlaskClient <Flask 'server.server'>>

    @pytest.fixture(scope='module')
    def init_db(test_client):
    
        # setup -- create the database tables
>       db.create_all()

server/tests/integration/test_setup.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1039: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:1031: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:962: in get_engine
    return connector.get_engine()
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:555: in get_engine
    options = self.get_options(sa_url, echo)
server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:570: in get_options
    self._sa.apply_driver_hacks(self._app, sa_url, options)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'NoneType' object has no attribute 'drivername'") raised in repr()] SQLAlchemy object at 0x7f98573db670>
app = <Flask 'server.server'>, sa_url = None, options = {}

    def apply_driver_hacks(self, app, sa_url, options):
        """This method is called before engine creation and used to inject
        driver specific hacks into the options.  The `options` parameter is
        a dictionary of keyword arguments that will then be used to call
        the :func:`sqlalchemy.create_engine` function.
    
        The default implementation provides some saner defaults for things
        like pool sizes for MySQL and sqlite.  Also it injects the setting of
        `SQLALCHEMY_NATIVE_UNICODE`.
        """
>       if sa_url.drivername.startswith('mysql'):
E       AttributeError: 'NoneType' object has no attribute 'drivername'

server/venv/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:883: AttributeError
=========================== short test summary info ============================
ERROR server/tests/integration/test_authentication.py::test_registration_missing_header
ERROR server/tests/integration/test_authentication.py::test_registration_malformed_header
ERROR server/tests/integration/test_authentication.py::test_registration_verification_token_invalid
ERROR server/tests/integration/test_authentication.py::test_registration_user_info_error
ERROR server/tests/integration/test_authentication.py::test_registration_token_valid_missing_info1
ERROR server/tests/integration/test_authentication.py::test_registration_token_valid_missing_info2
ERROR server/tests/integration/test_authentication.py::test_registration_user_id_already_exists
ERROR server/tests/integration/test_authentication.py::test_successful_user_registration
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_use_game_without_registration
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_no_puzzles
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_nonexistent_puzzle
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_valid
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_small
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_difficulty_large
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_large
ERROR server/tests/integration/test_sudoku_endpoints.py::test_save_new_puzzle_invalid_size_small
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_all_puzzles_for_user
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_valid
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_get_unaffiliated_puzzle
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_already_in_puzzle
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_that_doesnt_exist
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_add_player_to_puzzle_valid
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_to_join_puzzle_max_players_reached
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_no_value_yet
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_valid_override_value
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_puzzle_player_is_not_affiliated_with
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_low
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_piece_high
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_high
ERROR server/tests/integration/test_sudoku_endpoints.py::test_attempt_add_piece_invalid_position_low
ERROR server/tests/integration/test_sudoku_endpoints.py::test_get_puzzle_solution_incomplete
============================== 31 errors in 2.57s ==============================
